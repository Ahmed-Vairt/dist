{"version":3,"sources":["Class.js","PlatformUtils.js","LogNative.js","Log.js","IWorker.js","WasmHelper.js","CryptoUtils.js","CryptoWorker.js","CryptoWorkerImpl.js","BigNumber.js","NumberUtils.js","BufferUtils.js","SerialBuffer.js","MinerWorker.js","MinerWorkerImpl.js","MinerWorkerPool.js","GenesisConfig.js","ArrayUtils.js","Assert.js","MerkleTree.js","MerklePath.js","Policy.js","Serializable.js","Hash.js","PublicKey.js","Signature.js","Address.js","Account.js","PrunedAccount.js","BasicAccount.js","Contract.js","HashedTimeLockedContract.js","VestingContract.js","BlockHeader.js","BlockInterlink.js","BlockBody.js","BlockUtils.js","Block.js","Transaction.js","SignatureProof.js","BasicTransaction.js","ExtendedTransaction.js"],"names":["Class","scope","exports","self","window","[object Object]","cls","name","register","PlatformUtils","isBrowser","process","require","RTCPeerConnection","webkitRTCPeerConnection","location","protocol","navigator","onLine","LogNative","this","_global_level","Log","INFO","_tag_levels","localStorage","c","getItem","JSON","parse","e","console","warn","tag","level","setItem","stringify","args","isLoggable","unshift","Level","toStringTag","Date","toTimeString","substr","error","ERROR","apply","WARNING","info","debug","DEBUG","trace","TRACE","log","instance","_instance","native","_native","setLoggable","get","l","i","length","toString","constructor","msg","message","arguments","Array","prototype","slice","call","undefined","VERBOSE","ASSERT","v","isNaN","parseInt","toLowerCase","d","bind","w","t","IWorker","clazz","worker","Proxy","workerScript","_workersSupported","Nimiq","_path","createProxy","Worker","URL","createObjectURL","Blob","replace","_workerImplementation","init","size","Pool","startWorkerForProxy","start","data","command","res","postMessage","status","result","id","areWorkersAsync","_insideWebWorker","WorkerGlobalScope","_global","global","baseClazz","impl","onmessage","stubBaseOnMessage","url","resolve","head","document","getElementsByTagName","script","createElement","type","src","ret","setTimeout","onreadystatechange","onload","appendChild","proxyClass","super","_name","_messageId","_worker","_receive","_waiting","Map","_invoke","then","cb","delete","WorkerProxy","Promise","obj","set","funcName","Object","getOwnPropertyNames","Stub","finalRes","_result","_onmessage","close","poolClass","proxyInitializer","_proxyInitializer","_poolSize","_workers","_freeWorkers","_waitingCalls","_updateToSize","poolSize","_size","catch","push","shift","_step","indexOf","destroy","workerPromises","createdWorkers","all","pop","idx","splice","_moduleLoadedCallbacks","WasmHelper","isNodeJs","_importStarted","importWasmBrowser","importScriptBrowser","_importFinished","importWasmNodeJs","importScriptNodeJs","wasm","module","_adjustWasmPath","WebAssembly","xhr","XMLHttpRequest","open","responseType","wasmBinary","response","onerror","send","fs","readFileSync","buf","u","Uint8Array","toUint8Array","asm","_adjustScriptPath","moduleSettings","async","reject","onRuntimeInitialized","importScripts","_loadBrowserScript","__dirname","CryptoUtils","key","SHA512_BLOCK_SIZE","SerialBuffer","Hash","computeSha512","iKey","oKey","byte","innerHash","BufferUtils","concatTypedArrays","password","salt","iterations","derivedKeyLength","hashLength","SIZE","Algorithm","SHA512","Math","pow","Error","ceil","r","derivedKey","write","writeUint32","computeHmacSha512","j","k","xor","CryptoWorker","getInstanceAsync","kdf","ENCRYPTION_INPUT_SIZE","ENCRYPTION_SALT_LENGTH","lib","getRandomValues","ENCRYPTION_SIZE","writeUint8","log2","ENCRYPTION_KDF_ROUNDS","otpKdf","computeBlake2b","subarray","ENCRYPTION_CHECKSUM_LENGTH","readUint8","roundsLog","rounds","encryptedData","read","check","decryptedData","checksum","privateKey","PrivateKey","PublicKey","derive","hash","equals","CryptoLib","_workerAsync","startWorkerPoolForProxy","input","inputs","block","transactionValid","timeNow","genesisHash","networkId","CryptoWorkerImpl","_superInit","doImportBrowser","out","getSize","ARGON2D","NodeNative","node_argon2","stackPtr","Module","stackSave","hashSize","wasmOut","stackAlloc","wasmIn","HEAPU8","buffer","_nimiq_argon2","stackRestore","hashes","stackTmp","node_kdf","wasmSalt","_nimiq_kdf","blockSerialized","GenesisConfig","GENESIS_HASH","unserialize","NETWORK_ID","Block","body","transactions","_valid","valid","_verify","header","interlinkHash","interlink","bodyHash","serialize","prepareForWorkerUse","globalObject","BigNumber","isNumeric","mathceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","a","s","z","charCodeAt","compare","x","y","b","xc","yc","intCheck","min","max","isArray","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","alphabet","isNum","test","round","search","substring","format","rm","c0","ne","maxOrMin","method","m","normalise","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","p","hasOwnProperty","crypto","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","lt","minimum","gt","random","dp","rand","Uint32Array","copy","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","NumberUtils","val","Number","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","bin","String","fromCharCode","string","u8","TextDecoder","_ISO_8859_15_DECODER","decode","num","_BASE64_LOOKUP","end","tmp","output","_tripletToBase64","join","extraBytes","parts","len2","_base64encodeChunk","Buffer","from","btoa","_codePointTextDecoder","_base64fromByteArray","base64","atob","toBase64","BASE32_ALPHABET","NIMIQ","symbol","base32","charmap","toUpperCase","forEach","char","hex","code","HEX_ALPHABET","trim","StringUtils","isHexBytes","match","lpad","viewA","viewB","byteLength","BASE64_ALPHABET","RFC4648","RFC4648_HEX","bufferOrArrayOrLength","_view","DataView","_readPos","_writePos","ArrayUtils","readPos","value","writePos","array","getUint8","setUint8","getUint16","setUint16","getUint32","setUint32","isUint64","readUint16","readUint32","readUint64","writeUint16","writeUint64","getFloat64","setFloat64","bytes","toAscii","isMultibyte","fromAscii","view","byteOffset","padding","isUint8","MinerWorker","blockHeader","compact","minNonce","maxNonce","MinerWorkerImpl","_malloc","nonce","_nimiq_argon2_target","_free","MinerWorkerPool","_miningEnabled","_activeNonces","_block","_noncesPerRun","_observable","Observable","_shareCompact","Policy","BLOCK_TARGET_MAX","_runsPerCycle","Infinity","_cycleWait","_superUpdateToSize","multiMine","fail","node_argon2_target_async","computeArgon2d","noncesPerRun","nonces","runsPerCycle","cycleWait","callback","on","off","shareCompact","nBits","_startMiner","map","nonceRange","_singleMiner","fire","newMin","newRange","uintarr","begin","clamp","list","indices","reverseRange","found","Assert","condition","MerkleTree","values","fnHash","_hash","_computeRoot","light","mid","left","right","leftHash","rightHash","o","MerklePath","nodes","some","it","MerklePathNode","_nodes","leafValue","leafHash","path","_compute","containsLeaf","inner","leftLeaf","rightLeaf","root","node","serializedSize","count","leftBitsSize","leftBits","_compress","reduce","sum","every","_left","coins","SATOSHIS_PER_COIN","satoshis","blockHeight","startHeight","_supplyCacheInterval","startI","_supplyCacheMax","endI","supply","INITIAL_SUPPLY","_supplyCache","endHeight","_supplyAfter","initialSupply","_blockRewardAt","currentSupply","supplyAfter","remaining","TOTAL_SUPPLY","EMISSION_TAIL_START","EMISSION_TAIL_REWARD","EMISSION_SPEED","BLOCK_TIME","BLOCK_SIZE_MAX","DIFFICULTY_BLOCK_WINDOW","DIFFICULTY_MAX_ADJUSTMENT_FACTOR","TRANSACTION_VALIDITY_WINDOW","M","K","DELTA","NUM_BLOCKS_VERIFICATION","NUM_SNAPSHOTS_MAX","Serializable","toHex","arg","algorithm","BLAKE2B","_obj","_algorithm","blake2b","argon2d","computeSha256","SHA256","sha256","fromBase64","fromHex","node_blake2","_nimiq_blake2","node_sha256","_nimiq_sha256","node_sha512","_nimiq_sha512","NULL","_publicKeyDerive","publicKeys","sort","_delinearizeAndAggregatePublicKeys","Address","fromHash","PeerId","publicKeysObj","publicKeysHash","_publicKeysHash","raw","_publicKeysDelinearizeAndAggregate","node_ed25519_public_key_derive","pubKeyBuffer","HEAP8","privKeyBuffer","_ed25519_public_key_derive","fill","publicKey","concatenatedPublicKeys","node_ed25519_hash_public_keys","wasmInPublicKeys","_ed25519_hash_public_keys","hashedPublicKey","node_ed25519_delinearize_public_key","wasmInPublicKey","wasmInPublicKeysHash","_ed25519_delinearize_public_key","delinearizedPublicKey","node_ed25519_aggregate_delinearized_public_keys","_ed25519_aggregate_delinearized_public_keys","aggregatePublicKey","Signature","_signatureCreate","commitment","signatures","_combinePartialSignatures","_signatureVerify","combinedCommitment","partialSignatures","combinedSignature","_aggregatePartialSignatures","sigA","sigB","_scalarsAdd","PartialSignature","node_ed25519_add_scalars","wasmOutSum","wasmInA","wasmInB","_ed25519_add_scalars","node_ed25519_sign","wasmOutSignature","signatureBuffer","wasmInMessage","wasmInPubKey","wasmInPrivKey","_ed25519_sign","signature","node_ed25519_verify","wasmInSignature","_ed25519_verify","SERIALIZED_SIZE","fromUserFriendlyAddress","CCODE","_ibanCheck","fromBase32","withSpaces","toBase32","HEX_SIZE","CONTRACT_CREATION","Account","balance","_type","_balance","TYPE_MAP","has","transaction","transactionsCache","revert","validityStartHeight","withBalance","fee","newBalance","containsTransaction","INITIAL","isInitial","Type","BASIC","VESTING","HTLC","PrunedAccount","address","account","_address","_account","BasicAccount","SignatureProof","verifyTransaction","hasFlag","Transaction","Flag","recipientType","withIncomingTransaction","create","Contract","recipient","getContractCreationAddress","HashedTimeLockedContract","sender","hashRoot","hashCount","timeout","totalAmount","isUint32","_sender","_recipient","_hashRoot","_hashCount","_timeout","_totalAmount","hashAlgorithm","toUserFriendlyAddress","proof","ProofType","REGULAR_TRANSFER","hashDepth","preImage","compute","verify","serializeContent","EARLY_RESOLVE","TIMEOUT_RESOLVE","verifyIncomingTransaction","minCap","isSignedBy","withOutgoingTransaction","VestingContract","owner","vestingStart","vestingStepBlocks","vestingStepAmount","vestingTotalAmount","_owner","_vestingStart","_vestingStepBlocks","_vestingStepAmount","_vestingTotalAmount","getMinCap","BlockHeader","prevHash","accountsHash","height","timestamp","version","CURRENT_VERSION","isUint16","isHash","BlockUtils","isValidCompact","_version","_prevHash","_interlinkHash","_bodyHash","_accountsHash","_nBits","_height","_timestamp","_nonce","SUPPORTED_VERSIONS","includes","isProofOfWork","target","prevHeader","_pow","hard","compactToTarget","difficulty","compactToDifficulty","Version","V1","BlockInterlink","repeatBitsSize","repeatBits","lastHash","compressed","_hashes","_repeatBits","_compressed","computeRoot","BlockBody","extraData","minerAddr","prunedAccounts","_minerAddr","_extraData","_transactions","_prunedAccounts","extraDataLength","numTransactions","numPrunedAccounts","tx","acc","previousTx","compareBlockOrder","previousAcc","isToBePruned","getMerkleLeafs","addresses","transactionCount","getTargetHeight","targetToCompact","difficultyToTarget","targetToDifficulty","hashToTarget","getTargetDepth","isValidTarget","headBlock","tailBlock","deltaTotalDifficulty","that","actualTime","adjustment","averageDifficulty","nextTarget","_header","_interlink","_body","time","isLight","now","blockVerify","TIMESTAMP_DRIFT_MAX","verifyProofOfWork","_verifyInterlink","isFull","_verifyBody","predecessor","isImmediateSuccessorOf","getNextInterlink","prevPow","targetHeight","blockFound","depth","HashSet","addAll","removeAll","depthDiff","commonBlock","thisInterlink","prevInterlink","isInterlinkSuccessorOf","nextVersion","thisPowDepth","getHashDepth","nextTargetDepth","numOccurrences","senderType","flags","_format","_senderType","_recipientType","_value","_fee","_networkId","_validityStartHeight","_flags","_data","_proof","FORMAT_MAP","serializedContentSize","verifyOutgoingTransaction","recCompare","senderCompare","feePerByte","flag","Format","EXTENDED","NONE","ALL","signerKey","merklePath","_publicKey","_merklePath","_signature","merkleRoot","BasicTransaction","senderPubKey","singleSig","toAddress","_signatureProof","ExtendedTransaction","dataSize","proofSize"],"mappings":"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","file":"worker.js","sourcesContent":["class Class {\n    static get scope() {\n        if (typeof exports !== 'undefined') return exports;\n        if (typeof self !== 'undefined') return self;\n        return window;\n    }\n\n    static register(cls) {\n        if (typeof exports !== 'undefined') exports[cls.name] = cls;\n    }\n}\nClass.register(Class);\n","class PlatformUtils {\n    /**\n     * @returns {boolean}\n     */\n    static isBrowser() {\n        return typeof window !== 'undefined';\n    }\n\n    /**\n     * @return {boolean}\n     */\n    static isNodeJs() {\n        return !PlatformUtils.isBrowser() && typeof process === 'object' && typeof require === 'function';\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWebRTC() {\n        const RTCPeerConnection = PlatformUtils.isBrowser() ? (window.RTCPeerConnection || window.webkitRTCPeerConnection) : null;\n        return !!RTCPeerConnection;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWS() {\n        return !PlatformUtils.isBrowser() || (location && location.protocol === 'http:');\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isOnline() {\n        return (!PlatformUtils.isBrowser() || !('onLine' in window.navigator)) || window.navigator.onLine;\n    }\n}\nClass.register(PlatformUtils);\n","class LogNative {\n    constructor() {\n        this._global_level = Log.INFO;\n        this._tag_levels = {};\n        try {\n            if (window.localStorage) {\n                try {\n                    let c = window.localStorage.getItem('log_tag_levels');\n                    if (c && typeof c === 'string') c = JSON.parse(c);\n                    if (c && typeof c === 'object') this._tag_levels = c;\n                } catch (e) {\n                    console.warn('Failed to load log configuration from local storage.');\n                }\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n\n    isLoggable(tag, level) {\n        if (tag && this._tag_levels[tag]) {\n            return this._tag_levels[tag] <= level;\n        }\n        if (this._tag_levels['*']) {\n            return this._tag_levels['*'] <= level;\n        }\n        return this._global_level <= level;\n    }\n\n    setLoggable(tag, level) {\n        if (tag && tag.name) tag = tag.name;\n        this._tag_levels[tag] = level;\n        if (window.localStorage) {\n            window.localStorage.setItem('log_tag_levels', JSON.stringify(this._tag_levels));\n        }\n    }\n\n    msg(level, tag, args) {\n        if (tag && tag.name) tag = tag.name;\n        if (!this.isLoggable(tag, level)) return;\n        if (tag) args.unshift(tag + ':');\n        args.unshift(`[${Log.Level.toStringTag(level)} ${new Date().toTimeString().substr(0, 8)}]`);\n        if (console.error && level >= Log.ERROR) {\n            console.error.apply(console, args);\n        } else if (console.warn && level >= Log.WARNING) {\n            console.warn.apply(console, args);\n        } else if (console.info && level >= Log.INFO) {\n            console.info.apply(console, args);\n        } else if (console.debug && level >= Log.DEBUG) {\n            console.debug.apply(console, args);\n        } else if (console.trace && level <= Log.TRACE) {\n            console.trace.apply(console, args);\n        } else {\n            console.log.apply(console, args);\n        }\n    }\n}\nClass.register(LogNative);\n","class Log {\n    /**\n     * @returns {Log}\n     */\n    static get instance() {\n        if (!Log._instance) {\n            Log._instance = new Log(new LogNative());\n        }\n        return Log._instance;\n    }\n\n    /**\n     * @param {LogNative} native\n     */\n    constructor(native) {\n        /** @type {LogNative} */\n        this._native = native;\n    }\n\n    /**\n     * @param {string} tag\n     * @param {Log.Level} level\n     */\n    setLoggable(tag, level) {\n        this._native.setLoggable(tag, Log.Level.get(level));\n    }\n\n    /** @type {Log.Level} */\n    get level() {\n        return this._native._global_level;\n    }\n\n    /** @type {Log.Level} */\n    set level(l) {\n        this._native._global_level = Log.Level.get(l);\n    }\n\n    /**\n     * @param {Log.Level} level\n     * @param {string|{name:string}} tag\n     * @param {Array} args\n     */\n    msg(level, tag, args) {\n        if (this._native.isLoggable(tag, level)) {\n            for (let i = 0; i < args.length; ++i) {\n                if (typeof args[i] === 'function') {\n                    args[i] = args[i]();\n                }\n                if (typeof args[i] === 'object') {\n                    if (typeof args[i].toString === 'function') {\n                        args[i] = args[i].toString();\n                    } else if (args[i].constructor && args[i].constructor.name) {\n                        args[i] = `{Object: ${args[i].constructor.name}}`;\n                    } else {\n                        args[i] = '{Object}';\n                    }\n                }\n            }\n            this._native.msg(level, tag, args);\n        }\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static d(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.DEBUG, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static e(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.ERROR, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static i(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.INFO, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static v(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.VERBOSE, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static w(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.WARNING, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static t(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.TRACE, tag, args);\n    }\n}\n\n/**\n * @enum {number|string}\n */\nLog.Level = {\n    TRACE: 1,\n    VERBOSE: 2,\n    DEBUG: 3,\n    INFO: 4,\n    WARNING: 5,\n    ERROR: 6,\n    ASSERT: 7,\n\n    /**\n     * @param {Log.Level} level\n     * @returns {string}\n     */\n    toStringTag: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'T';\n            case Log.Level.VERBOSE:\n                return 'V';\n            case Log.Level.DEBUG:\n                return 'D';\n            case Log.Level.INFO:\n                return 'I';\n            case Log.Level.WARNING:\n                return 'W';\n            case Log.Level.ERROR:\n                return 'E';\n            case Log.Level.ASSERT:\n                return 'A';\n            default:\n                return '*';\n        }\n    },\n\n    toString: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'trace';\n            case Log.Level.VERBOSE:\n                return 'verbose';\n            case Log.Level.DEBUG:\n                return 'debug';\n            case Log.Level.INFO:\n                return 'info';\n            case Log.Level.WARNING:\n                return 'warn';\n            case Log.Level.ERROR:\n                return 'error';\n            case Log.Level.ASSERT:\n                return 'assert';\n            default:\n                return 'unknown';\n        }\n    },\n\n    /**\n     * @param {string|number|Log.Level} v\n     * @returns {Log.Level}\n     */\n    get: function (v) {\n        if (typeof v === 'number') return /** @type {Log.Level} */ v;\n        if (!isNaN(parseInt(v))) return /** @type {Log.Level} */ parseInt(v);\n        switch (v.toLowerCase()) {\n            case 't':\n            case 'trace':\n                return Log.Level.TRACE;\n            case 'v':\n            case 'verbose':\n                return Log.Level.VERBOSE;\n            case 'd':\n            case 'debug':\n                return Log.Level.DEBUG;\n            case 'i':\n            case 'info':\n                return Log.Level.INFO;\n            case 'w':\n            case 'warn':\n            case 'warning':\n                return Log.Level.WARNING;\n            case 'e':\n            case 'error':\n            case 'exception':\n                return Log.Level.ERROR;\n            case 'a':\n            case 'assert':\n            case 'assertion':\n                return Log.Level.ASSERT;\n        }\n        return /** @type {Log.Level} */ 0;\n    }\n};\nLog.TRACE = Log.Level.TRACE;\nLog.VERBOSE = Log.Level.VERBOSE;\nLog.DEBUG = Log.Level.DEBUG;\nLog.INFO = Log.Level.INFO;\nLog.WARNING = Log.Level.WARNING;\nLog.ERROR = Log.Level.ERROR;\nLog.ASSERT = Log.Level.ASSERT;\nLog._instance = null;\n\nLog.d.tag = (tag) => Log.d.bind(null, tag);\nLog.e.tag = (tag) => Log.e.bind(null, tag);\nLog.i.tag = (tag) => Log.i.bind(null, tag);\nLog.v.tag = (tag) => Log.v.bind(null, tag);\nLog.w.tag = (tag) => Log.w.bind(null, tag);\nLog.t.tag = (tag) => Log.t.bind(null, tag);\n\nClass.register(Log);\n","/**\n * @interface\n */\nclass IWorker {\n    static async createProxy(clazz, name, worker) {\n        return new (IWorker.Proxy(clazz))(worker, name);\n    }\n\n    static async startWorkerForProxy(clazz, name, workerScript) {\n        if (!IWorker._workersSupported) {\n            await IWorker._workerImplementation[clazz.name].init(name);\n            return IWorker._workerImplementation[clazz.name];\n        } else {\n            if (!workerScript) {\n                workerScript = `${Nimiq._path}worker.js`;\n            }\n            return IWorker.createProxy(clazz, name, new Worker(window.URL.createObjectURL(new Blob([`Nimiq = {_path: '${Nimiq._path}'}; importScripts('${workerScript.replace(/'/g, '')}');`]))));\n        }\n    }\n\n    static async startWorkerPoolForProxy(clazz, name, size, workerScript) {\n        return (new (IWorker.Pool(clazz))((name) => IWorker.startWorkerForProxy(clazz, name, workerScript), name, size)).start();\n    }\n\n    static async stubBaseOnMessage(msg) {\n        try {\n            if (msg.data.command === 'init') {\n                if (IWorker._workerImplementation[msg.data.args[0]]) {\n                    const res = await IWorker._workerImplementation[msg.data.args[0]].init(msg.data.args[1]);\n                    self.postMessage({status: 'OK', result: res, id: msg.data.id});\n                } else {\n                    self.postMessage({status: 'error', result: 'Unknown worker!', id: msg.data.id});\n                }\n            } else {\n                self.postMessage({status: 'error', result: 'Worker not yet initialized!', id: msg.data.id});\n            }\n        } catch (e) {\n            self.postMessage({status: 'error', result: e, id: msg.data.id});\n        }\n    }\n\n    static get _workersSupported() {\n        return typeof Worker !== 'undefined';\n    }\n\n    static get areWorkersAsync() {\n        return IWorker._workersSupported;\n    }\n\n    static get _insideWebWorker() {\n        return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n\n    static prepareForWorkerUse(baseClazz, impl) {\n        if (IWorker._insideWebWorker) {\n            // Only inside WebWorker\n            self.onmessage = IWorker.stubBaseOnMessage;\n        }\n        IWorker._workerImplementation = IWorker._workerImplementation || {};\n        IWorker._workerImplementation[baseClazz.name] = impl;\n    }\n\n    static _loadBrowserScript(url, resolve) {\n        // Adding the script tag to the head as suggested before\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n\n        // Then bind the event to the callback function.\n        // There are several events for cross browser compatibility.\n        // These events might occur before processing, so delay them a bit.\n        const ret = () => window.setTimeout(resolve, 100);\n        script.onreadystatechange = ret;\n        script.onload = ret;\n\n        // Fire the loading\n        head.appendChild(script);\n    }\n\n    static Proxy(clazz) {\n        const proxyClass = class extends clazz {\n            /**\n             * @param {Worker} worker\n             * @param {string} [name]\n             */\n            constructor(worker, name) {\n                super();\n                this._name = name;\n                this._messageId = 0;\n                this._worker = worker;\n                this._worker.onmessage = this._receive.bind(this);\n                /** @type {Map.<number,{resolve:Function,error:Function}>} */\n                this._waiting = new Map();\n                return this._invoke('init', [clazz.name, name]).then(() => { return this; });\n            }\n\n            _receive(msg) {\n                const cb = this._waiting.get(msg.data.id);\n                if (!cb) {\n                    Log.w(WorkerProxy, 'Unknown reply', msg);\n                } else {\n                    this._waiting.delete(msg.data.id);\n                    if (msg.data.status === 'OK') {\n                        cb.resolve(msg.data.result);\n                    } else if (msg.data.status === 'error') {\n                        cb.error(msg.data.result);\n                    }\n                }\n            }\n\n            /**\n             * @param {string} command\n             * @param {object[]} [args]\n             * @returns {Promise}\n             * @private\n             */\n            _invoke(command, args = []) {\n                return new Promise((resolve, error) => {\n                    const obj = {command: command, args: args, id: this._messageId++};\n                    this._waiting.set(obj.id, {resolve, error});\n                    this._worker.postMessage(obj);\n                });\n            }\n\n            destroy() {\n                return this._invoke('destroy');\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                proxyClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return proxyClass;\n    }\n\n    /**\n     * @param {object} clazz\n     * @return {Stub}\n     * @constructor\n     */\n    static Stub(clazz) {\n        const Stub = class extends clazz {\n            constructor() {\n                super();\n            }\n\n            _result(msg, status, result) {\n                self.postMessage({status, result, id: msg.data.id});\n            }\n\n            _onmessage(msg) {\n                try {\n                    const res = this._invoke(msg.data.command, msg.data.args);\n                    if (res instanceof Promise) {\n                        res.then((finalRes) => { this._result(msg, 'OK', finalRes); });\n                    } else {\n                        this._result(msg, 'OK', res);\n                    }\n                } catch (e) {\n                    this._result(msg, 'error', e.message || e);\n                }\n            }\n\n            init(name) {\n                this._name = name;\n                if (IWorker._insideWebWorker) {\n                    self.name = name;\n                    self.onmessage = (msg) => this._onmessage(msg);\n                }\n            }\n\n            _invoke(command, args) {\n                return this[command].apply(this, args);\n            }\n\n            destroy() {\n                if (IWorker._insideWebWorker) {\n                    self.close();\n                }\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                Stub.prototype[funcName] = function () {\n                    throw `Not implemented in IWorker Stub: ${funcName}`;\n                };\n            }\n        }\n        return Stub;\n    }\n\n    static Pool(clazz) {\n        const poolClass = class extends clazz {\n            /**\n             *\n             * @param {function(string):Promise} proxyInitializer\n             * @param {string} [name]\n             * @param {number} [size] Number of workers in this pool.\n             */\n            constructor(proxyInitializer, name = 'pool', size = 1) {\n                super();\n                /** @type {function(string):Promise} */\n                this._proxyInitializer = proxyInitializer;\n                /** @type {string} */\n                this._name = name;\n                /** @type {number} */\n                this._poolSize = size;\n                /** @type {Array} */\n                this._workers = [];\n                /** @type {Array} */\n                this._freeWorkers = [];\n                /** @type {Array.<{name:string, args:Array, resolve:function, error:function}>} */\n                this._waitingCalls = [];\n            }\n\n            async start() {\n                await this._updateToSize();\n\n                return this;\n            }\n\n            get poolSize() {\n                return this._poolSize;\n            }\n\n            set poolSize(_size) {\n                this._poolSize = _size;\n                this._updateToSize().catch(Log.w.tag(IWorker));\n            }\n\n            destroy() {\n                this._poolSize = 0;\n                return this._updateToSize();\n            }\n\n            /**\n             * @param {string} name Name of the function to call on a worker\n             * @param {Array} args Arguments to pass to the function\n             * @returns {Promise}\n             */\n            _invoke(name, args) {\n                if (IWorker._workersSupported) {\n                    return new Promise((resolve, error) => {\n                        this._waitingCalls.push({name, args, resolve, error});\n                        const worker = this._freeWorkers.shift();\n                        if (worker) {\n                            this._step(worker).catch(Log.w.tag(IWorker));\n                        }\n                    });\n                } else {\n                    return this._workers[0][name].apply(this._workers[0], args);\n                }\n            }\n\n            /**\n             * @param worker\n             * @returns {Promise.<void>}\n             * @private\n             */\n            async _step(worker) {\n                let call = this._waitingCalls.shift();\n                while (call) {\n                    try {\n                        // eslint-disable-next-line no-await-in-loop\n                        call.resolve(await worker[call.name].apply(worker, call.args));\n                    } catch (e) {\n                        call.error(e);\n                    }\n                    if (this._workers.indexOf(worker) === -1) {\n                        worker.destroy();\n                        return;\n                    }\n                    call = this._waitingCalls.shift();\n                }\n                this._freeWorkers.push(worker);\n            }\n\n            async _updateToSize() {\n                if (typeof Worker === 'undefined' && this._poolSize > 1) {\n                    Log.d(IWorker, 'Pool of size larger than 1 requires WebWorker support.');\n                    this._poolSize = 1;\n                }\n\n                const workerPromises = [];\n                while (this._workers.length + workerPromises.length < this._poolSize) {\n                    workerPromises.push(this._proxyInitializer(`${this._name}#${this._workers.length + workerPromises.length}`));\n                }\n                const createdWorkers = await Promise.all(workerPromises);\n                for (const worker of createdWorkers) {\n                    this._workers.push(worker);\n                    this._step(worker).catch(Log.w.tag(IWorker));\n                }\n\n                while (this._workers.length > this._poolSize) {\n                    const worker = this._freeWorkers.shift() || this._workers.pop();\n                    const idx = this._workers.indexOf(worker);\n                    if (idx >= 0) {\n                        // This was a free worker, also remove it from the worker list and destroy it now.\n                        this._workers.splice(idx, 1);\n                        worker.destroy();\n                    }\n                }\n                return this;\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                poolClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return poolClass;\n    }\n}\n\nIWorker._moduleLoadedCallbacks = {};\nIWorker._workerImplementation = {};\nClass.register(IWorker);\n","class WasmHelper {\n\n    static async doImportBrowser() {\n        if (PlatformUtils.isNodeJs()) return;\n        if (WasmHelper._importStarted) {\n            Log.e(WasmHelper, 'doImportBrowser invoked twice');\n            return;\n        }\n        WasmHelper._importStarted = true;\n        if (await WasmHelper.importWasmBrowser('worker-wasm.wasm')) {\n            await WasmHelper.importScriptBrowser('worker-wasm.js');\n        } else {\n            await WasmHelper.importScriptBrowser('worker-js.js');\n        }\n        WasmHelper._importFinished = true;\n    }\n\n    static doImportNodeJs() {\n        if (!PlatformUtils.isNodeJs()) return;\n        if (WasmHelper.importWasmNodeJs('worker-wasm.wasm')) {\n            WasmHelper.importScriptNodeJs('worker-wasm.js');\n        } else {\n            WasmHelper.importScriptNodeJs('worker-js.js');\n        }\n    }\n\n    /**\n     * @param {string} wasm\n     * @param {string} module\n     * @returns {Promise.<boolean>}\n     */\n    static importWasmBrowser(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return Promise.resolve(false);\n        }\n\n        return new Promise((resolve) => {\n            try {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', wasm, true);\n                xhr.responseType = 'arraybuffer';\n                xhr.onload = function () {\n                    WasmHelper._global[module] = WasmHelper._global[module] || {};\n                    WasmHelper._global[module].wasmBinary = xhr.response;\n                    resolve(true);\n                };\n                xhr.onerror = function () {\n                    Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                    resolve(false);\n                };\n                xhr.send(null);\n            } catch (e) {\n                Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                resolve(false);\n            }\n        });\n    }\n\n    static importWasmNodeJs(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return false;\n        }\n\n        const toUint8Array = function (buf) {\n            const u = new Uint8Array(buf.length);\n            for (let i = 0; i < buf.length; ++i) {\n                u[i] = buf[i];\n            }\n            return u;\n        };\n        const fs = require('fs');\n        try {\n            const data = fs.readFileSync(wasm);\n            WasmHelper._global[module] = WasmHelper._global[module] || {};\n            WasmHelper._global[module].wasmBinary = toUint8Array(data);\n            return true;\n        } catch (e) {\n            Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}: ${e}`);\n            return false;\n        }\n    }\n\n    static importScriptBrowser(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n        return new Promise(async (resolve, reject) => {\n            if (module) {\n                moduleSettings.onRuntimeInitialized = () => resolve(true);\n            }\n            if (typeof importScripts === 'function') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    importScripts(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof window === 'object') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    WasmHelper._loadBrowserScript(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof require === 'function') {\n                WasmHelper._global[module] = require(script)(moduleSettings);\n                if (!module) resolve(true);\n            } else {\n                reject('No way to load scripts.');\n            }\n        });\n    }\n\n    static importScriptNodeJs(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n\n        if (typeof require === 'function') {\n            WasmHelper._global[module] = require(script)(moduleSettings);\n            if (!module) return true;\n        }\n        return false;\n    }\n\n    static fireModuleLoaded(module = 'Module') {\n        if (typeof WasmHelper._moduleLoadedCallbacks[module] === 'function') {\n            WasmHelper._moduleLoadedCallbacks[module]();\n            WasmHelper._moduleLoadedCallbacks[module] = null;\n        }\n    }\n\n    static _loadBrowserScript(url) {\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        head.appendChild(script);\n    }\n\n    static _adjustWasmPath(wasm) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) wasm = `${Nimiq._path}${wasm}`;\n        if (typeof __dirname === 'string' && wasm.indexOf('/') === -1) wasm = `${__dirname}/${wasm}`;\n        return wasm;\n    }\n\n    static _adjustScriptPath(script) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) script = `${Nimiq._path}${script}`;\n        if (typeof __dirname === 'string' && script.indexOf('/') === -1) script = `${__dirname}/${script}`;\n        return script;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n}\nWasmHelper._moduleLoadedCallbacks = {};\n\nClass.register(WasmHelper);\n\n","class CryptoUtils {\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} data\n     * @return {Uint8Array}\n     */\n    static computeHmacSha512(key, data) {\n        if (key.length > CryptoUtils.SHA512_BLOCK_SIZE) {\n            key = new SerialBuffer(Hash.computeSha512(key));\n        }\n\n        const iKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        const oKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        for (let i = 0; i < CryptoUtils.SHA512_BLOCK_SIZE; ++i) {\n            const byte = key[i] || 0;\n            iKey[i] = 0x36 ^ byte;\n            oKey[i] = 0x5c ^ byte;\n        }\n\n        const innerHash = Hash.computeSha512(BufferUtils.concatTypedArrays(iKey, data));\n        return Hash.computeSha512(BufferUtils.concatTypedArrays(oKey, innerHash));\n    }\n\n    /**\n     * @param {Uint8Array} password\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @param {number} derivedKeyLength\n     * @return {Uint8Array}\n     */\n    static computePBKDF2sha512(password, salt, iterations, derivedKeyLength) {\n        // Following https://www.ietf.org/rfc/rfc2898.txt\n        const hashLength = Hash.SIZE.get(Hash.Algorithm.SHA512);\n\n        if (derivedKeyLength > (Math.pow(2, 32) - 1) * hashLength) {\n            throw new Error('Derived key too long');\n        }\n\n        const l = Math.ceil(derivedKeyLength / hashLength);\n        const r = derivedKeyLength - (l - 1) * hashLength;\n\n        const derivedKey = new SerialBuffer(derivedKeyLength);\n        for (let i = 1; i <= l; i++) {\n            let u = new SerialBuffer(salt.length + 4);\n            u.write(salt);\n            u.writeUint32(i);\n\n            u = CryptoUtils.computeHmacSha512(password, u);\n            const t = u;\n            for (let j = 1; j < iterations; j++) {\n                u = CryptoUtils.computeHmacSha512(password, u);\n                for (let k = 0; k < t.length; k++) {\n                    t[k] ^= u[k];\n                }\n            }\n\n            if (i < l) {\n                derivedKey.write(t);\n            } else {\n                derivedKey.write(t.slice(0, r));\n            }\n        }\n        return derivedKey;\n    }\n\n    /**\n     * @param {Uint8Array} message\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @return {Promise<Uint8Array>}\n     */\n    static async otpKdf(message, key, salt, iterations) {\n        return BufferUtils.xor(message, await (await CryptoWorker.getInstanceAsync()).kdf(key, salt, iterations));\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @param {Uint8Array} key\n     * @return {Promise.<Uint8Array>}\n     */\n    static async encryptOtpKdf(data, key) {\n        if (data.length !== CryptoUtils.ENCRYPTION_INPUT_SIZE) throw new Error('Invalid data size for encryption');\n\n        const salt = new Uint8Array(CryptoUtils.ENCRYPTION_SALT_LENGTH);\n        CryptoWorker.lib.getRandomValues(salt);\n\n        const buf = new SerialBuffer(CryptoUtils.ENCRYPTION_SIZE);\n        buf.writeUint8(2); // Argon2 KDF, Hash checksum\n        buf.writeUint8(Math.log2(CryptoUtils.ENCRYPTION_KDF_ROUNDS));\n        buf.write(await CryptoUtils.otpKdf(data, key, salt, CryptoUtils.ENCRYPTION_KDF_ROUNDS));\n        buf.write(salt);\n        buf.write(Hash.computeBlake2b(data).subarray(0, CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH));\n        return buf;\n    }\n\n    /**\n     * @param {SerialBuffer} data\n     * @param {Uint8Array} key\n     * @return {Promise.<Uint8Array>}\n     */\n    static async decryptOtpKdf(data, key) {\n        const type = data.readUint8();\n        if (type !== 1 && type !== 2) throw new Error('Unsupported type');\n        const roundsLog = data.readUint8();\n        if (roundsLog > 32) throw new Error('Rounds out-of-bounds');\n        const rounds = Math.pow(2, roundsLog);\n        const encryptedData = data.read(CryptoUtils.ENCRYPTION_INPUT_SIZE);\n        const salt = data.read(CryptoUtils.ENCRYPTION_SALT_LENGTH);\n        const check = data.read(CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH);\n\n        const decryptedData = await CryptoUtils.otpKdf(encryptedData, key, salt, rounds);\n\n        // Validate checksum.\n        let checksum;\n        switch (type) {\n            case 1: {\n                const privateKey = new PrivateKey(decryptedData);\n                const publicKey = PublicKey.derive(privateKey);\n                checksum = publicKey.hash();\n                break;\n            }\n            case 2: {\n                checksum = Hash.computeBlake2b(decryptedData);\n                break;\n            }\n        }\n\n        if (!BufferUtils.equals(checksum.subarray(0, CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH), check)) {\n            throw new Error('Invalid key');\n        }\n\n        return decryptedData;\n    }\n}\nCryptoUtils.SHA512_BLOCK_SIZE = 128;\nCryptoUtils.ENCRYPTION_INPUT_SIZE = 32;\nCryptoUtils.ENCRYPTION_KDF_ROUNDS = 256;\nCryptoUtils.ENCRYPTION_CHECKSUM_LENGTH = 4;\nCryptoUtils.ENCRYPTION_SALT_LENGTH = 16;\nCryptoUtils.ENCRYPTION_SIZE = /*version + rounds*/ 2 + CryptoUtils.ENCRYPTION_INPUT_SIZE + CryptoUtils.ENCRYPTION_SALT_LENGTH + CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH;\n\nClass.register(CryptoUtils);\n","/**\n * @interface\n */\nclass CryptoWorker {\n    static get lib() { return CryptoLib.instance; }\n\n    /**\n     * @returns {Promise.<CryptoWorker>}\n     */\n    static async getInstanceAsync() {\n        if (!CryptoWorker._workerAsync) {\n            CryptoWorker._workerAsync = await IWorker.startWorkerPoolForProxy(CryptoWorker, 'crypto', 4);\n        }\n        return CryptoWorker._workerAsync;\n    }\n    /**\n     * @param {Uint8Array} input\n     * @returns {Promise.<Uint8Array>}\n     */\n    async computeArgon2d(input) {}\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Promise.<Array.<Uint8Array>>}\n     */\n    async computeArgon2dBatch(inputs) {}\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Promise.<Uint8Array>}\n     */\n    async kdf(key, salt, iterations) {}\n\n    /**\n     * @param {Uint8Array} block\n     * @param {Array.<bool>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(block, transactionValid, timeNow, genesisHash, networkId) {}\n}\n/** @type {CryptoWorker} */\nCryptoWorker._workerAsync = null;\n\nClass.register(CryptoWorker);\n","class CryptoWorkerImpl extends IWorker.Stub(CryptoWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        await WasmHelper.doImportBrowser();\n        CryptoWorker._workerAsync = this;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    computeArgon2d(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Array.<Uint8Array>}\n     */\n    computeArgon2dBatch(inputs) {\n        const hashes = [];\n        if (PlatformUtils.isNodeJs()) {\n            for(const input of inputs) {\n                const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n                const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                hashes.push(out);\n            }\n            return hashes;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const stackTmp = Module.stackSave();\n                for (const input of inputs) {\n                    Module.stackRestore(stackTmp);\n                    const wasmIn = Module.stackAlloc(input.length);\n                    new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                    const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                    if (res !== 0) {\n                        throw res;\n                    }\n                    const hash = new Uint8Array(hashSize);\n                    hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                    hashes.push(hash);\n                }\n                return hashes;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Uint8Array}\n     */\n    kdf(key, salt, iterations) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_kdf(out, new Uint8Array(key), new Uint8Array(salt), 512, iterations);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(key.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, key.length).set(key);\n                const wasmSalt = Module.stackAlloc(salt.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmSalt, salt.length).set(salt);\n                const res = Module._nimiq_kdf(wasmOut, wasmIn, key.length, wasmSalt, salt.length, 512, iterations);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} blockSerialized\n     * @param {Array.<boolean|undefined>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(blockSerialized, transactionValid, timeNow, genesisHash, networkId) {\n        // The worker only uses a stub genesis config.\n        GenesisConfig = {\n            GENESIS_HASH: Hash.unserialize(new SerialBuffer(genesisHash)),\n            NETWORK_ID: networkId\n        };\n\n        const block = Block.unserialize(new SerialBuffer(blockSerialized));\n        for (let i = 0; i < transactionValid.length; i++) {\n            block.body.transactions[i]._valid = transactionValid[i];\n        }\n\n        const valid = await block._verify(timeNow);\n        const pow = await block.header.pow();\n        const interlinkHash = block.interlink.hash();\n        const bodyHash = block.body.hash();\n        return { valid: valid, pow: pow.serialize(), interlinkHash: interlinkHash.serialize(), bodyHash: bodyHash.serialize() };\n    }\n}\n\nIWorker.prepareForWorkerUse(CryptoWorker, new CryptoWorkerImpl());\n",";(function (globalObject) {\n    'use strict';\n\n    /*\n     *      bignumber.js v7.0.1\n     *      A JavaScript library for arbitrary-precision arithmetic.\n     *      https://github.com/MikeMcl/bignumber.js\n     *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n     *      MIT Licensed.\n     *\n     *      BigNumber.prototype methods     |  BigNumber methods\n     *                                      |\n     *      absoluteValue            abs    |  clone\n     *      comparedTo                      |  config               set\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\n     *      dividedBy                div    |      ROUNDING_MODE\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\n     *      exponentiatedBy          pow    |      RANGE\n     *      integerValue                    |      CRYPTO\n     *      isEqualTo                eq     |      MODULO_MODE\n     *      isFinite                        |      POW_PRECISION\n     *      isGreaterThan            gt     |      FORMAT\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\n     *      isInteger                       |  isBigNumber\n     *      isLessThan               lt     |  maximum              max\n     *      isLessThanOrEqualTo      lte    |  minimum              min\n     *      isNaN                           |  random\n     *      isNegative                      |\n     *      isPositive                      |\n     *      isZero                          |\n     *      minus                           |\n     *      modulo                   mod    |\n     *      multipliedBy             times  |\n     *      negated                         |\n     *      plus                            |\n     *      precision                sd     |\n     *      shiftedBy                       |\n     *      squareRoot               sqrt   |\n     *      toExponential                   |\n     *      toFixed                         |\n     *      toFormat                        |\n     *      toFraction                      |\n     *      toJSON                          |\n     *      toNumber                        |\n     *      toPrecision                     |\n     *      toString                        |\n     *      valueOf                         |\n     *\n     */\n\n\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        // EDITABLE\n        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n        // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function clone(configObject) {\n        var div, convertBase, parseNumeric,\n            P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n            ONE = new BigNumber(1),\n\n\n            //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n            // The default values below must be integers within the inclusive ranges stated.\n            // The values can also be changed at run-time using BigNumber.set.\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            // The rounding mode used when rounding to the above decimal places, and when using\n            // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n            // UP         0 Away from zero.\n            // DOWN       1 Towards zero.\n            // CEIL       2 Towards +Infinity.\n            // FLOOR      3 Towards -Infinity.\n            // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n            // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n            // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n            // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n            // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            // The modulo mode used when calculating the modulus: a mod n.\n            // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n            // The remainder (r) is calculated as: r = a - n * q.\n            //\n            // UP        0 The remainder is positive if the dividend is negative, else is negative.\n            // DOWN      1 The remainder has the same sign as the dividend.\n            //             This modulo mode is commonly known as 'truncated division' and is\n            //             equivalent to (a % n) in JavaScript.\n            // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n            // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n            // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n            //             The remainder is always positive.\n            //\n            // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n            // modes are commonly used for the modulus operation.\n            // Although the other rounding modes can also be used, they may not give useful results.\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the exponentiatedBy operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 0,                    // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            },\n\n            // The alphabet used for base conversion.\n            // It must be at least 2 characters long, with no '.' or repeated character.\n            // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n            ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n\n        //------------------------------------------------------------------------------------------\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\n         */\n        function BigNumber(n, b) {\n            var alphabet, c, e, i, isNum, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if (!(x instanceof BigNumber)) {\n\n                // Don't throw on constructor call without new (#81).\n                // '[BigNumber Error] Constructor call without new: {n}'\n                //throw Error(bignumberError + ' Constructor call without new: ' + n);\n                return new BigNumber(n, b);\n            }\n\n            if (b == null) {\n\n                // Duplicate.\n                if (n instanceof BigNumber) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = (n = n.c) ? n.slice() : n;\n                    return;\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum && n * 0 == 0) {\n\n                    // Use `1 / n` to handle minus zero also.\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n                    // Faster path for integers.\n                    if (n === ~~n) {\n                        for (e = 0, i = n; i >= 10; i /= 10, e++);\n                        x.e = e;\n                        x.c = [n];\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\n                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n                }\n\n            } else {\n\n                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n                intCheck(b, 2, ALPHABET.length, 'Base');\n                str = n + '';\n\n                // Allow exponential notation to be used with base 10 argument, while\n                // also rounding to DECIMAL_PLACES as with other bases.\n                if (b == 10) {\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum) {\n\n                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                    if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                    if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n                        throw Error\n                        (tooManyDigits + n);\n                    }\n\n                    // Prevent later check for length on converted number.\n                    isNum = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n\n                    // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                    if (b > 10 && b < 37) str = str.toLowerCase();\n                }\n\n                alphabet = ALPHABET.slice(0, b);\n                e = i = 0;\n\n                // Check that str is a valid base b number.\n                // Don't use RegExp so alphabet can contain special characters.\n                for (len = str.length; i < len; i++) {\n                    if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n                        if (c == '.') {\n\n                            // If '.' is not the first character and it has not be found before.\n                            if (i > e) {\n                                e = len;\n                                continue;\n                            }\n                        }\n\n                        return parseNumeric(x, n + '', isNum, b);\n                    }\n                }\n\n                str = convertBase(str, b, 10, x.s);\n            }\n\n            // Decimal point?\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for (i = 0; str.charCodeAt(i) === 48; i++);\n\n            // Determine trailing zeros.\n            for (len = str.length; str.charCodeAt(--len) === 48;);\n\n            str = str.slice(i, ++len);\n\n            if (str) {\n                len -= i;\n\n                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                if (isNum && BigNumber.DEBUG &&\n                    len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n                    throw Error\n                    (tooManyDigits + (x.s * n));\n                }\n\n                e = e - i - 1;\n\n                // Overflow?\n                if (e > MAX_EXP) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                    // Underflow?\n                } else if (e < MIN_EXP) {\n\n                    // Zero.\n                    x.c = [x.e = 0];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = (e + 1) % LOG_BASE;\n                    if (e < 0) i += LOG_BASE;\n\n                    if (i < len) {\n                        if (i) x.c.push(+str.slice(0, i));\n\n                        for (len -= LOG_BASE; i < len;) {\n                            x.c.push(+str.slice(i, i += LOG_BASE));\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for (; i--; str += '0');\n                    x.c.push(+str);\n                }\n            } else {\n\n                // Zero.\n                x.c = [x.e = 0];\n            }\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.clone = clone;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object with the following optional properties (if the value of a property is\n         * a number, it must be an integer within the inclusive range stated):\n         *\n         *   DECIMAL_PLACES   {number}           0 to MAX\n         *   ROUNDING_MODE    {number}           0 to 8\n         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\n         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\n         *   CRYPTO           {boolean}          true or false\n         *   MODULO_MODE      {number}           0 to 9\n         *   POW_PRECISION       {number}           0 to MAX\n         *   ALPHABET         {string}           A string of two or more unique characters, and not\n         *                                       containing '.'. The empty string, null or undefined\n         *                                       resets the alphabet to its default value.\n         *   FORMAT           {object}           An object with some of the following properties:\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined, except for ALPHABET.\n         *\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = BigNumber.set = function (obj) {\n            var p, v;\n\n            if (obj != null) {\n\n                if (typeof obj == 'object') {\n\n                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        DECIMAL_PLACES = v;\n                    }\n\n                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 8, p);\n                        ROUNDING_MODE = v;\n                    }\n\n                    // EXPONENTIAL_AT {number|number[]}\n                    // Integer, -MAX to MAX inclusive or\n                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, 0, p);\n                            intCheck(v[1], 0, MAX, p);\n                            TO_EXP_NEG = v[0];\n                            TO_EXP_POS = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n                        }\n                    }\n\n                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n                    if (obj.hasOwnProperty(p = 'RANGE')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, -1, p);\n                            intCheck(v[1], 1, MAX, p);\n                            MIN_EXP = v[0];\n                            MAX_EXP = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            if (v) {\n                                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                            } else {\n                                throw Error\n                                (bignumberError + p + ' cannot be zero: ' + v);\n                            }\n                        }\n                    }\n\n                    // CRYPTO {boolean} true or false.\n                    // '[BigNumber Error] CRYPTO not true or false: {v}'\n                    // '[BigNumber Error] crypto unavailable'\n                    if (obj.hasOwnProperty(p = 'CRYPTO')) {\n                        v = obj[p];\n                        if (v === !!v) {\n                            if (v) {\n                                if (typeof crypto != 'undefined' && crypto &&\n                                    (crypto.getRandomValues || crypto.randomBytes)) {\n                                    CRYPTO = v;\n                                } else {\n                                    CRYPTO = !v;\n                                    throw Error\n                                    (bignumberError + 'crypto unavailable');\n                                }\n                            } else {\n                                CRYPTO = v;\n                            }\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' not true or false: ' + v);\n                        }\n                    }\n\n                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 9, p);\n                        MODULO_MODE = v;\n                    }\n\n                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        POW_PRECISION = v;\n                    }\n\n                    // FORMAT {object}\n                    // '[BigNumber Error] FORMAT not an object: {v}'\n                    if (obj.hasOwnProperty(p = 'FORMAT')) {\n                        v = obj[p];\n                        if (typeof v == 'object') FORMAT = v;\n                        else throw Error\n                        (bignumberError + p + ' not an object: ' + v);\n                    }\n\n                    // ALPHABET {string}\n                    // '[BigNumber Error] ALPHABET invalid: {v}'\n                    if (obj.hasOwnProperty(p = 'ALPHABET')) {\n                        v = obj[p];\n\n                        // Disallow if only one character, or contains '.' or a repeated character.\n                        if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\n                            ALPHABET = v;\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' invalid: ' + v);\n                        }\n                    }\n\n                } else {\n\n                    // '[BigNumber Error] Object expected: {v}'\n                    throw Error\n                    (bignumberError + 'Object expected: ' + obj);\n                }\n            }\n\n            return {\n                DECIMAL_PLACES: DECIMAL_PLACES,\n                ROUNDING_MODE: ROUNDING_MODE,\n                EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n                RANGE: [MIN_EXP, MAX_EXP],\n                CRYPTO: CRYPTO,\n                MODULO_MODE: MODULO_MODE,\n                POW_PRECISION: POW_PRECISION,\n                FORMAT: FORMAT,\n                ALPHABET: ALPHABET\n            };\n        };\n\n\n        /*\n         * Return true if v is a BigNumber instance, otherwise return false.\n         *\n         * v {any}\n         */\n        BigNumber.isBigNumber = function (v) {\n            return v instanceof BigNumber || v && v._isBigNumber === true || false;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.maximum = BigNumber.max = function () {\n            return maxOrMin(arguments, P.lt);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.minimum = BigNumber.min = function () {\n            return maxOrMin(arguments, P.gt);\n        };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\n         * '[BigNumber Error] crypto unavailable'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n                ? function () { return mathfloor(Math.random() * pow2_53); }\n                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                    (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                if (dp == null) dp = DECIMAL_PLACES;\n                else intCheck(dp, 0, MAX);\n\n                k = mathceil(dp / LOG_BASE);\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if (crypto.getRandomValues) {\n\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n                        for (; i < k;) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if (v >= 9e15) {\n                                b = crypto.getRandomValues(new Uint32Array(2));\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                        // Node.js supporting crypto.randomBytes.\n                    } else if (crypto.randomBytes) {\n\n                        // buffer\n                        a = crypto.randomBytes(k *= 7);\n\n                        for (; i < k;) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\n                                (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\n                                (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                            if (v >= 9e15) {\n                                crypto.randomBytes(7).copy(a, i);\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else {\n                        CRYPTO = false;\n                        throw Error\n                        (bignumberError + 'crypto unavailable');\n                    }\n                }\n\n                // Use Math.random.\n                if (!CRYPTO) {\n\n                    for (; i < k;) {\n                        v = random53bitInt();\n                        if (v < 9e15) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if (k && dp) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor(k / v) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for (; c[i] === 0; c.pop(), i--);\n\n                // Zero?\n                if (i < 0) {\n                    c = [e = 0];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Called by BigNumber and BigNumber.prototype.toString.\n        convertBase = (function () {\n            var decimal = '0123456789';\n\n            /*\n             * Convert string of baseIn to an array of numbers of baseOut.\n             * Eg. toBaseOut('255', 10, 16) returns [15, 15].\n             * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\n             */\n            function toBaseOut(str, baseIn, baseOut, alphabet) {\n                var j,\n                    arr = [0],\n                    arrL,\n                    i = 0,\n                    len = str.length;\n\n                for (; i < len;) {\n                    for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n                    arr[0] += alphabet.indexOf(str.charAt(i++));\n\n                    for (j = 0; j < arr.length; j++) {\n\n                        if (arr[j] > baseOut - 1) {\n                            if (arr[j + 1] == null) arr[j + 1] = 0;\n                            arr[j + 1] += arr[j] / baseOut | 0;\n                            arr[j] %= baseOut;\n                        }\n                    }\n                }\n\n                return arr.reverse();\n            }\n\n            // Convert a numeric string of baseIn to a numeric string of baseOut.\n            // If the caller is toString, we are converting from base 10 to baseOut.\n            // If the caller is BigNumber, we are converting from baseIn to base 10.\n            return function (str, baseIn, baseOut, sign, callerIsToString) {\n                var alphabet, d, e, k, r, x, xc, y,\n                    i = str.indexOf('.'),\n                    dp = DECIMAL_PLACES,\n                    rm = ROUNDING_MODE;\n\n                // Non-integer.\n                if (i >= 0) {\n                    k = POW_PRECISION;\n\n                    // Unlimited precision.\n                    POW_PRECISION = 0;\n                    str = str.replace('.', '');\n                    y = new BigNumber(baseIn);\n                    x = y.pow(str.length - i);\n                    POW_PRECISION = k;\n\n                    // Convert str as if an integer, then restore the fraction part by dividing the\n                    // result by its base raised to a power.\n\n                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\n                        10, baseOut, decimal);\n                    y.e = y.c.length;\n                }\n\n                // Convert the number as integer.\n\n                xc = toBaseOut(str, baseIn, baseOut, callerIsToString\n                    ? (alphabet = ALPHABET, decimal)\n                    : (alphabet = decimal, ALPHABET));\n\n                // xc now represents str as an integer and converted to baseOut. e is the exponent.\n                e = k = xc.length;\n\n                // Remove trailing zeros.\n                for (; xc[--k] == 0; xc.pop());\n\n                // Zero?\n                if (!xc[0]) return alphabet.charAt(0);\n\n                // Does str represent an integer? If so, no need for the division.\n                if (i < 0) {\n                    --e;\n                } else {\n                    x.c = xc;\n                    x.e = e;\n\n                    // The sign is needed for correct rounding.\n                    x.s = sign;\n                    x = div(x, y, dp, rm, baseOut);\n                    xc = x.c;\n                    r = x.r;\n                    e = x.e;\n                }\n\n                // xc now represents str converted to baseOut.\n\n                // THe index of the rounding digit.\n                d = e + dp + 1;\n\n                // The rounding digit: the digit to the right of the digit that may be rounded up.\n                i = xc[d];\n\n                // Look at the rounding digits and mode to determine whether to round up.\n\n                k = baseOut / 2;\n                r = r || d < 0 || xc[d + 1] != null;\n\n                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                    : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                    rm == (x.s < 0 ? 8 : 7));\n\n                // If the index of the rounding digit is not greater than zero, or xc represents\n                // zero, then the result of the base conversion is zero or, if rounding up, a value\n                // such as 0.00001.\n                if (d < 1 || !xc[0]) {\n\n                    // 1^-dp or 0\n                    str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\n                        : alphabet.charAt(0);\n                } else {\n\n                    // Truncate xc to the required number of decimal places.\n                    xc.length = d;\n\n                    // Round up?\n                    if (r) {\n\n                        // Rounding up may mean the previous digit has to be rounded up and so on.\n                        for (--baseOut; ++xc[--d] > baseOut;) {\n                            xc[d] = 0;\n\n                            if (!d) {\n                                ++e;\n                                xc = [1].concat(xc);\n                            }\n                        }\n                    }\n\n                    // Determine trailing zeros.\n                    for (k = xc.length; !xc[--k];);\n\n                    // E.g. [4, 11, 15] becomes 4bf.\n                    for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n                    // Add leading zeros, decimal point and trailing zeros as required.\n                    str = toFixedPoint(str, e, alphabet.charAt(0));\n                }\n\n                // The caller will add the sign.\n                return str;\n            };\n        })();\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply(x, k, base) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for (x = x.slice(); i--;) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x = [carry].concat(x);\n\n                return x;\n            }\n\n            function compare(a, b, aL, bL) {\n                var i, cmp;\n\n                if (aL != bL) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for (i = cmp = 0; i < aL; i++) {\n\n                        if (a[i] != b[i]) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n\n                return cmp;\n            }\n\n            function subtract(a, b, aL, base) {\n                var i = 0;\n\n                // Subtract b from a.\n                for (; aL--;) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for (; !a[0] && a.length > 1; a.splice(0, 1));\n            }\n\n            // x: dividend, y: divisor.\n            return function (x, y, dp, rm, base) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if (!xc || !xc[0] || !yc || !yc[0]) {\n\n                    return new BigNumber(\n\n                        // Return NaN if either NaN, or both Infinity or 0.\n                        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n                            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if (!base) {\n                    base = BASE;\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n                if (yc[i] > (xc[i] || 0)) e--;\n\n                if (s < 0) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor(base / (yc[0] + 1));\n\n                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n                    if (n > 1) {\n                        yc = multiply(yc, n, base);\n                        xc = multiply(xc, n, base);\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice(0, yL);\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for (; remL < yL; rem[remL++] = 0);\n                    yz = yc.slice();\n                    yz = [0].concat(yz);\n                    yc0 = yc[0];\n                    if (yc[1] >= base / 2) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare(yc, rem, yL, remL);\n\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor(rem0 / yc0);\n\n                            //  Algorithm:\n                            //  product = divisor multiplied by trial digit (n).\n                            //  Compare product and remainder.\n                            //  If product is greater than remainder:\n                            //    Subtract divisor from product, decrement trial digit.\n                            //  Subtract product from remainder.\n                            //  If product was less than remainder at the last compare:\n                            //    Compare new remainder and divisor.\n                            //    If remainder is greater than divisor:\n                            //      Subtract divisor from remainder, increment trial digit.\n\n                            if (n > 1) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply(yc, n, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder then trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while (compare(prod, rem, prodL, remL) == 1) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if (n == 0) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if (prodL < remL) prod = [0].concat(prod);\n\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            remL = rem.length;\n\n                            // If product was < remainder.\n                            if (cmp == -1) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while (compare(yc, rem, yL, remL) < 1) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if (cmp === 0) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if (rem[0]) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [xc[xi]];\n                            remL = 1;\n                        }\n                    } while ((xi++ < xL || rem[0] != null) && s--);\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if (!qc[0]) qc.splice(0, 1);\n                }\n\n                if (base == BASE) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n                    // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n: a BigNumber.\n         * i: the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm: the rounding mode.\n         * id: 1 (toExponential) or 2 (toPrecision).\n         */\n        function format(n, i, rm, id) {\n            var c0, e, ne, len, str;\n\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n\n            if (!n.c) return n.toString();\n\n            c0 = n.c[0];\n            ne = n.e;\n\n            if (i == null) {\n                str = coeffToString(n.c);\n                str = id == 1 || id == 2 && ne <= TO_EXP_NEG\n                    ? toExponential(str, ne)\n                    : toFixedPoint(str, ne, '0');\n            } else {\n                n = round(new BigNumber(n), i, rm);\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString(n.c);\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n                    // Append zeros?\n                    for (; len < i; str += '0', len++);\n                    str = toExponential(str, e);\n\n                    // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint(str, e, '0');\n\n                    // Append zeros?\n                    if (e + 1 > len) {\n                        if (--i > 0) for (str += '.'; i--; str += '0');\n                    } else {\n                        i += e - len;\n                        if (i > 0) {\n                            if (e + 1 == len) str += '.';\n                            for (; i--; str += '0');\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin(args, method) {\n            var m, n,\n                i = 0;\n\n            if (isArray(args[0])) args = args[0];\n            m = new BigNumber(args[0]);\n\n            for (; ++i < args.length;) {\n                n = new BigNumber(args[i]);\n\n                // If any number is NaN, return NaN.\n                if (!n.s) {\n                    m = n;\n                    break;\n                } else if (method.call(m, n)) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise(n, c, e) {\n            var i = 1,\n                j = c.length;\n\n            // Remove trailing zeros.\n            for (; !c[--j]; c.pop());\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for (j = c[0]; j >= 10; j /= 10, i++);\n\n            // Overflow?\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n                // Underflow?\n            } else if (e < MIN_EXP) {\n\n                // Zero.\n                n.c = [n.e = 0];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function (x, str, isNum, b) {\n                var base,\n                    s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n                // No exception on ±Infinity or NaN.\n                if (isInfinityOrNaN.test(s)) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                    x.c = x.e = null;\n                } else {\n                    if (!isNum) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace(basePrefix, function (m, p1, p2) {\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n                        }\n\n                        if (str != s) return new BigNumber(s, base);\n                    }\n\n                    // '[BigNumber Error] Not a number: {n}'\n                    // '[BigNumber Error] Not a base {b} number: {n}'\n                    if (BigNumber.DEBUG) {\n                        throw Error\n                        (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n                    }\n\n                    // NaN\n                    x.c = x.e = x.s = null;\n                }\n            }\n        })();\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round(x, sd, rm, r) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if (i < 0) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ni = 0];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[d - j - 1] % 10 | 0;\n                    } else {\n                        ni = mathceil((i + 1) / LOG_BASE);\n\n                        if (ni >= xc.length) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for (; xc.length <= ni; xc.push(0));\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for (d = 1; k >= 10; k /= 10, d++);\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                        // Are there any non-zero digits after the rounding digit?\n                        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n                        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n                    r = rm < 4\n                        ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                        : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\n                        rm == (x.s < 0 ? 8 : 7));\n\n                    if (sd < 1 || !xc[0]) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if (i == 0) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[LOG_BASE - i];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for (; ;) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if (ni == 0) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                                j = xc[0] += k;\n                                for (k = 1; j >= 10; j /= 10, k++);\n\n                                // if i != k the length has increased.\n                                if (i != k) {\n                                    x.e++;\n                                    if (xc[0] == BASE) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if (xc[ni] != BASE) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for (i = xc.length; xc[--i] === 0; xc.pop());\n                }\n\n                // Overflow? Infinity.\n                if (x.e > MAX_EXP) {\n                    x.c = x.e = null;\n\n                    // Underflow? Zero.\n                } else if (x.e < MIN_EXP) {\n                    x.c = [x.e = 0];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if (x.s < 0) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return\n         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         *   0 if they have the same value,\n         *   or null if the value of either is NaN.\n         */\n        P.comparedTo = function (y, b) {\n            return compare(this, new BigNumber(y, b));\n        };\n\n\n        /*\n         * If dp is undefined or null or true or false, return the number of decimal places of the\n         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         *\n         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.decimalPlaces = P.dp = function (dp, rm) {\n            var c, n, v,\n                x = this;\n\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), dp + x.e + 1, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n            if (n < 0) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function (y, b) {\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.idiv = function (y, b) {\n            return div(this, new BigNumber(y, b), 0, 1);\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\n         *\n         * If m is present, return the result modulo m.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * The modular power operation works efficiently when x, n, and m are integers, otherwise it\n         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\n         *\n         * n {number|string|BigNumber} The exponent. An integer.\n         * [m] {number|string|BigNumber} The modulus.\n         *\n         * '[BigNumber Error] Exponent not an integer: {n}'\n         */\n        P.exponentiatedBy = P.pow = function (n, m) {\n            var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\n                x = this;\n\n            n = new BigNumber(n);\n\n            // Allow NaN and ±Infinity, but not other non-integers.\n            if (n.c && !n.isInteger()) {\n                throw Error\n                (bignumberError + 'Exponent not an integer: ' + n);\n            }\n\n            if (m != null) m = new BigNumber(m);\n\n            // Exponent of MAX_SAFE_INTEGER is 15.\n            nIsBig = n.e > 14;\n\n            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n                // The sign of the result of pow when x is negative depends on the evenness of n.\n                // If +n overflows to ±Infinity, the evenness of n would be not be known.\n                y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\n                return m ? y.mod(m) : y;\n            }\n\n            nIsNeg = n.s < 0;\n\n            if (m) {\n\n                // x % m returns NaN if abs(m) is zero, or m is NaN.\n                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n                isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n                if (isModExp) x = x.mod(m);\n\n                // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n                // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n                // [1, 240000000]\n                ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n                // [80000000000000]  [99999750000000]\n                : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n                // If x is negative and n is odd, k = -0, else k = 0.\n                k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n                // If x >= 1, k = ±Infinity.\n                if (x.e > -1) k = 1 / k;\n\n                // If n is negative return ±0, else return ±Infinity.\n                return new BigNumber(nIsNeg ? 1 / k : k);\n\n            } else if (POW_PRECISION) {\n\n                // Truncating each coefficient array to a length of k after each multiplication\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\n                // i.e. there will be a minimum of 28 guard digits retained.\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\n            }\n\n            if (nIsBig) {\n                half = new BigNumber(0.5);\n                nIsOdd = isOdd(n);\n            } else {\n                nIsOdd = n % 2;\n            }\n\n            if (nIsNeg) n.s = 1;\n\n            y = new BigNumber(ONE);\n\n            // Performs 54 loop iterations for n of 9007199254740991.\n            for (; ;) {\n\n                if (nIsOdd) {\n                    y = y.times(x);\n                    if (!y.c) break;\n\n                    if (k) {\n                        if (y.c.length > k) y.c.length = k;\n                    } else if (isModExp) {\n                        y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n                    }\n                }\n\n                if (nIsBig) {\n                    n = n.times(half);\n                    round(n, n.e + 1, 1);\n                    if (!n.c[0]) break;\n                    nIsBig = n.e > 14;\n                    nIsOdd = isOdd(n);\n                } else {\n                    n = mathfloor(n / 2);\n                    if (!n) break;\n                    nIsOdd = n % 2;\n                }\n\n                x = x.times(x);\n\n                if (k) {\n                    if (x.c && x.c.length > k) x.c.length = k;\n                } else if (isModExp) {\n                    x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n                }\n            }\n\n            if (isModExp) return y;\n            if (nIsNeg) y = ONE.div(y);\n\n            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\n         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\n         */\n        P.integerValue = function (rm) {\n            var n = new BigNumber(this);\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n            return round(n, n.e + 1, rm);\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isEqualTo = P.eq = P.equals = function (y, b) {\n            return compare(this, new BigNumber(y, b)) === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise return false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isGreaterThan = P.gt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = function () {\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isLessThan = P.lt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isLessThanOrEqualTo = P.lte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise return false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise return false.\n         */\n        P.isNegative = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is positive, otherwise return false.\n         */\n        P.isPositive = function () {\n            return this.s > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = function (y, b) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Either Infinity?\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n                // Either zero?\n                if (!xc[0] || !yc[0]) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                        ROUNDING_MODE == 3 ? -0 : 0);\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if (a = xe - ye) {\n\n                if (xLTy = a < 0) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for (b = a; b--; t.push(0));\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n                for (a = b = 0; b < j; b++) {\n\n                    if (xc[b] != yc[b]) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = (j = yc.length) - (i = xc.length);\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if (b > 0) for (; b--; xc[i++] = 0);\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for (; j > a;) {\n\n                if (xc[--j] < yc[j]) {\n                    for (i = j; i && !xc[--i]; xc[i] = b);\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n            // Zero?\n            if (!xc[0]) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [y.e = 0];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function (y, b) {\n            var q, s,\n                x = this;\n\n            y = new BigNumber(y, b);\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if (!x.c || !y.s || y.c && !y.c[0]) {\n                return new BigNumber(NaN);\n\n                // Return x if y is Infinity or x is zero.\n            } else if (!y.c || x.c && !x.c[0]) {\n                return new BigNumber(x);\n            }\n\n            if (MODULO_MODE == 9) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div(x, y, 0, 3);\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div(x, y, 0, MODULO_MODE);\n            }\n\n            y = x.minus(q.times(y));\n\n            // To match JavaScript %, ensure sign of zero is sign of dividend.\n            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n            return y;\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\n         * of BigNumber(y, b).\n         */\n        P.multipliedBy = P.times = function (y, b) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = (y = new BigNumber(y, b)).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if (!xc || !yc || !xc[0] || !yc[0]) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if (!xc || !yc) {\n                        y.c = y.e = null;\n\n                        // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for (i = ycL; --i >= 0;) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for (k = xcL, j = i + k; j > i;) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.splice(0, 1);\n            }\n\n            return normalise(y, zc, e);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = function (y, b) {\n            var t,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Return ±Infinity if either ±Infinity.\n                if (!xc || !yc) return new BigNumber(a / 0);\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if (a = xe - ye) {\n                if (a > 0) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for (; a--; t.push(0));\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for (a = 0; b;) {\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n            }\n\n            if (a) {\n                xc = [a].concat(xc);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         * If sd is undefined or null or true or false, return the number of significant digits of\n         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         * If sd is true include integer-part trailing zeros in the count.\n         *\n         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\n         *                     boolean: whether to count integer-part trailing zeros: true or false.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.precision = P.sd = function (sd, rm) {\n            var c, n, v,\n                x = this;\n\n            if (sd != null && sd !== !!sd) {\n                intCheck(sd, 1, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), sd, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if (v = c[v]) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for (; v % 10 == 0; v /= 10, n--);\n\n                // Add the number of digits of the first element.\n                for (v = c[0]; v >= 10; v /= 10, n++);\n            }\n\n            if (sd && x.e + 1 > n) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\n         */\n        P.shiftedBy = function (k) {\n            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n            return this.times('1e' + k);\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt(N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt(I) =  I\n         *  sqrt(0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if (s !== 1 || !c || !c[0]) {\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n            }\n\n            // Initial estimate.\n            s = Math.sqrt(+x);\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if (s == 0 || s == 1 / 0) {\n                n = coeffToString(c);\n                if ((n.length + e) % 2 == 0) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n                if (s == 1 / 0) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber(s + '');\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if (r.c[0]) {\n                e = r.e;\n                s = e + dp;\n                if (s < 3) s = 0;\n\n                // Newton-Raphson iteration.\n                for (; ;) {\n                    t = r;\n                    r = half.times(t.plus(div(x, t, dp, 1)));\n\n                    if (coeffToString(t.c  ).slice(0, s) === (n =\n                        coeffToString(r.c)).slice(0, s)) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if (r.e < e) --s;\n                        n = n.slice(s - 3, s + 1);\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if (n == '9999' || !rep && n == '4999') {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if (!rep) {\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                                if (t.times(t).eq(x)) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                                // Truncate to the first rounding digit.\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toExponential = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp++;\n            }\n            return format(this, dp, rm, 1);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFixed = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp = dp + this.e + 1;\n            }\n            return format(this, dp, rm);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.set).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFormat = function (dp, rm) {\n            var str = this.toFixed(dp, rm);\n\n            if (this.c) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if (g1 > 0 && len > 0) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr(0, i);\n\n                    for (; i < len; i += g1) {\n                        intPart += groupSeparator + intDigits.substr(i, g1);\n                    }\n\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                    ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\n                    ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\n                        '$&' + FORMAT.fractionGroupSeparator)\n                    : fractionPart)\n                    : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\n         *\n         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\n                x = this,\n                xc = x.c;\n\n            if (md != null) {\n                n = new BigNumber(md);\n\n                // Throw if md is less than one or is not an integer, unless it is Infinity.\n                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n                    throw Error\n                    (bignumberError + 'Argument ' +\n                        (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\n                }\n            }\n\n            if (!xc) return x.toString();\n\n            d = new BigNumber(ONE);\n            n1 = d0 = new BigNumber(ONE);\n            d1 = n0 = new BigNumber(ONE);\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n            md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for (; ;)  {\n                q = div(n, d, 0, 1);\n                d2 = d0.plus(q.times(d1));\n                if (d2.comparedTo(md) == 1) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus(q.times(d2 = n1));\n                n0 = d2;\n                d = n.minus(q.times(d2 = d));\n                n = d2;\n            }\n\n            d2 = div(md.minus(d0), d1, 0, 1);\n            n0 = n0.plus(d2.times(n1));\n            d0 = d0.plus(d2.times(d1));\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\n                div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\n                ? [n1.toString(), d1.toString()]\n                : [n0.toString(), d0.toString()];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            return +this;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.toPrecision = function (sd, rm) {\n            if (sd != null) intCheck(sd, 1, MAX);\n            return format(this, sd, rm, 2);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to ALPHABET.length inclusive.\n         *\n         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if (e === null) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if (s < 0) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString(n.c);\n\n                if (b == null) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                        ? toExponential(str, e)\n                        : toFixedPoint(str, e, '0');\n                } else {\n                    intCheck(b, 2, ALPHABET.length, 'Base');\n                    str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n                }\n\n                if (s < 0 && n.c[0]) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return as toString, but do not accept a base argument, and include the minus sign for\n         * negative zero.\n         */\n        P.valueOf = P.toJSON = function () {\n            var str,\n                n = this,\n                e = n.e;\n\n            if (e === null) return n.toString();\n\n            str = coeffToString(n.c);\n\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                ? toExponential(str, e)\n                : toFixedPoint(str, e, '0');\n\n            return n.s < 0 ? '-' + str : str;\n        };\n\n\n        P._isBigNumber = true;\n\n        if (configObject != null) BigNumber.set(configObject);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for (; i < j;) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for (; z--; s = '0' + s);\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for (j = r.length; r.charCodeAt(--j) === 48;);\n        return r.slice(0, j + 1 || 1);\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare(x, y) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if (!i || !j) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if (a || b) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if (i != j) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if (!b) return k > l ^ a ? 1 : -1;\n\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n\n        // Compare digit by digit.\n        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\n     */\n    function intCheck(n, min, max, name) {\n        if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n            throw Error\n            (bignumberError + (name || 'Argument') + (typeof n == 'number'\n                ? n < min || n > max ? ' out of range: ' : ' not an integer: '\n                : ' not a primitive number: ') + n);\n        }\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    // Assumes finite n.\n    function isOdd(n) {\n        var k = n.c.length - 1;\n        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n\n    function toExponential(str, e) {\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\n            (e < 0 ? 'e' : 'e+') + e;\n    }\n\n\n    function toFixedPoint(str, e, z) {\n        var len, zs;\n\n        // Negative exponent?\n        if (e < 0) {\n\n            // Prepend zeros.\n            for (zs = z + '.'; ++e; zs += z);\n            str = zs + str;\n\n            // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if (++e > len) {\n                for (zs = z, e -= len; --e; zs += z);\n                str += zs;\n            } else if (e < len) {\n                str = str.slice(0, e) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n    globalObject.BigNumber = BigNumber;\n})(Class.scope);\nBigNumber = Class.scope.BigNumber;\nBigNumber.config({ DECIMAL_PLACES: 10 });\n","class NumberUtils {\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint8(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint16(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint32(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint64(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint32() {\n        return Math.floor(Math.random() * (NumberUtils.UINT32_MAX + 1));\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint64() {\n        return Math.floor(Math.random() * (NumberUtils.UINT64_MAX + 1));\n    }\n\n    /**\n     * @param {string} bin\n     * @return {number}\n     */\n    static fromBinary(bin) {\n        return parseInt(bin, 2);\n    }\n}\n\nNumberUtils.UINT8_MAX = 255;\nNumberUtils.UINT16_MAX = 65535;\nNumberUtils.UINT32_MAX = 4294967295;\nNumberUtils.UINT64_MAX = Number.MAX_SAFE_INTEGER;\n//Object.freeze(NumberUtils);\nClass.register(NumberUtils);\n","class BufferUtils {\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toAscii(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} string\n     * @return {Uint8Array}\n     */\n    static fromAscii(string) {\n        const buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static _codePointTextDecoder(u8) {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not supprot iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } finally {\n                BufferUtils._ISO_8859_15_DECODER = null;\n            }\n        }\n        return BufferUtils._ISO_8859_15_DECODER.decode(u8)\n            .replace('€', '¤').replace('Š', '¦').replace('š', '¨').replace('Ž', '´')\n            .replace('ž', '¸').replace('Œ', '¼').replace('œ', '½').replace('Ÿ', '¾');\n    }\n\n    static _tripletToBase64(num) {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8, start, end) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64(buffer) {\n        if (PlatformUtils.isNodeJs()) {\n            return Buffer.from(buffer).toString('base64');\n        } else if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(new Uint8Array(buffer)));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64Url(buffer) {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '.');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64Url(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64.replace(/_/g, '/').replace(/-/g, '+').replace(/\\./g, '=')), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @param {string} [alphabet] Alphabet to use\n     * @return {string}\n     */\n    static toBase32(buf, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        let shift = 3, carry = 0, byte, symbol, i, res = '';\n\n        for (i = 0; i < buf.length; i++) {\n            byte = buf[i];\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n\n    /**\n     * @param {string} base32\n     * @param {string} [alphabet] Alphabet to use\n     * @return {Uint8Array}\n     */\n    static fromBase32(base32, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        const charmap = [];\n        alphabet.toUpperCase().split('').forEach((c, i) => {\n            if (!(c in charmap)) charmap[c] = i;\n        });\n\n        let symbol, shift = 8, carry = 0, buf = [];\n        base32.toUpperCase().split('').forEach((char) => {\n            // ignore padding\n            if (alphabet.length === 33 && char === alphabet[32]) return;\n\n            symbol = charmap[char] & 0xff;\n\n            shift -= 5;\n            if (shift > 0) {\n                carry |= symbol << shift;\n            } else if (shift < 0) {\n                buf.push(carry | (symbol >> -shift));\n                shift += 8;\n                carry = (symbol << shift) & 0xff;\n            } else {\n                buf.push(carry | symbol);\n                shift = 8;\n                carry = 0;\n            }\n        });\n\n        if (shift !== 8 && carry !== 0) {\n            buf.push(carry);\n        }\n\n        return new Uint8Array(buf);\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toHex(buffer) {\n        let hex = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            hex += BufferUtils.HEX_ALPHABET[code >>> 4];\n            hex += BufferUtils.HEX_ALPHABET[code & 0x0F];\n        }\n        return hex;\n    }\n\n    /**\n     * @param {string} hex\n     * @return {SerialBuffer}\n     */\n    static fromHex(hex) {\n        hex = hex.trim();\n        if (!StringUtils.isHexBytes(hex)) return null;\n        return new SerialBuffer(Uint8Array.from(hex.match(/.{2}/g) || [], byte => parseInt(byte, 16)));\n    }\n\n    /**\n     * @param {*} bytes\n     * @return {string}\n     */\n    static toBinary(buffer) {\n        let bin = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            bin += StringUtils.lpad(code.toString(2), '0', 8);\n        }\n        return bin;\n    }\n\n    /**\n     * @template T\n     * @param {T} a\n     * @param {*} b\n     * @return {T}\n     */\n    static concatTypedArrays(a, b) {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        if (a.length !== b.length) return false;\n        const viewA = new Uint8Array(a);\n        const viewB = new Uint8Array(b);\n        for (let i = 0; i < a.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {number} -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a, b) {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @return {Uint8Array}\n     */\n    static xor(a, b) {\n        const res = new Uint8Array(a.byteLength);\n        for (let i = 0; i < a.byteLength; ++i) {\n            res[i] = a[i] ^ b[i];\n        }\n        return res;\n    }\n}\nBufferUtils.BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nBufferUtils.BASE32_ALPHABET = {\n    RFC4648: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    RFC4648_HEX: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    NIMIQ: '0123456789ABCDEFGHJKLMNPQRSTUVXY'\n};\nBufferUtils.HEX_ALPHABET = '0123456789abcdef';\nBufferUtils._BASE64_LOOKUP = [];\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\n\nClass.register(BufferUtils);\n","class SerialBuffer extends Uint8Array {\n    /**\n     * @param {*} bufferOrArrayOrLength\n     */\n    constructor(bufferOrArrayOrLength) {\n        super(bufferOrArrayOrLength);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} start\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    subarray(start, end) {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    /** @type {number} */\n    get readPos() {\n        return this._readPos;\n    }\n\n    /** @type {number} */\n    set readPos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid readPos ${value}`;\n        this._readPos = value;\n    }\n\n    /** @type {number} */\n    get writePos() {\n        return this._writePos;\n    }\n\n    /** @type {number} */\n    set writePos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid writePos ${value}`;\n        this._writePos = value;\n    }\n\n    /**\n     * Resets the read and write position of the buffer to zero.\n     * @returns {void}\n     */\n    reset() {\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} length\n     * @return {Uint8Array}\n     */\n    read(length) {\n        const value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return new Uint8Array(value);\n    }\n\n    /**\n     * @param {*} array\n     */\n    write(array) {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint8() {\n        return this._view.getUint8(this._readPos++);\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint8(value) {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint16() {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint16(value) {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint32() {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint32(value) {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint64() {\n        const value = this._view.getUint32(this._readPos) * Math.pow(2, 32) + this._view.getUint32(this._readPos + 4);\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint64(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._view.setUint32(this._writePos, Math.floor(value / Math.pow(2, 32)));\n        this._view.setUint32(this._writePos + 4, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @return {number}\n     */\n    readVarUint() {\n        const value = this.readUint8();\n        if (value < 0xFD) {\n            return value;\n        } else if (value === 0xFD) {\n            return this.readUint16();\n        } else if (value === 0xFE) {\n            return this.readUint32();\n        } else /*if (value === 0xFF)*/ {\n            return this.readUint64();\n        }\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeVarUint(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            this.writeUint8(value);\n        } else if (value <= 0xFFFF) {\n            this.writeUint8(0xFD);\n            this.writeUint16(value);\n        } else if (value <= 0xFFFFFFFF) {\n            this.writeUint8(0xFE);\n            this.writeUint32(value);\n        } else {\n            this.writeUint8(0xFF);\n            this.writeUint64(value);\n        }\n    }\n\n    /**\n     * @param {number} value\n     * @returns {number}\n     */\n    static varUintSize(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            return 1;\n        } else if (value <= 0xFFFF) {\n            return 3;\n        } else if (value <= 0xFFFFFFFF) {\n            return 5;\n        } else {\n            return 9;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    readFloat64() {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeFloat64(value) {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readString(length) {\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writeString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length !== length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readPaddedString(length) {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] !== 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writePaddedString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    /**\n     * @return {string}\n     */\n    readVarLengthString() {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw 'Malformed length';\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     */\n    writeVarLengthString(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {number}\n     */\n    static varLengthStringSize(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        return /*length*/ 1 + value.length;\n    }\n}\nClass.register(SerialBuffer);\n","/**\n * @interface\n */\nclass MinerWorker {\n    /**\n     * @param blockHeader\n     * @param compact\n     * @param minNonce\n     * @param maxNonce\n     * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n     */\n    async multiMine(blockHeader, compact, minNonce, maxNonce) {}\n}\nClass.register(MinerWorker);\n","class MinerWorkerImpl extends IWorker.Stub(MinerWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        await WasmHelper.doImportBrowser();\n    }\n\n    async multiMine(input, compact, minNonce, maxNonce) {\n        const hash = new Uint8Array(32);\n        let wasmOut, wasmIn;\n        try {\n            wasmOut = Module._malloc(hash.length);\n            wasmIn = Module._malloc(input.length);\n            Module.HEAPU8.set(input, wasmIn);\n            const nonce = Module._nimiq_argon2_target(wasmOut, wasmIn, input.length, compact, minNonce, maxNonce, 512);\n            if (nonce === maxNonce) return false;\n            hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hash.length));\n            return {hash, nonce};\n        } catch (e) {\n            Log.w(MinerWorkerImpl, e);\n            throw e;\n        } finally {\n            if (wasmOut !== undefined) Module._free(wasmOut);\n            if (wasmIn !== undefined) Module._free(wasmIn);\n        }\n    }\n}\n\nIWorker.prepareForWorkerUse(MinerWorker, new MinerWorkerImpl());\n","/**\n *\n */\nclass MinerWorkerPool extends IWorker.Pool(MinerWorker) {\n    constructor(size = 1) {\n        super((name) => IWorker.startWorkerForProxy(MinerWorker, name), 'miner', size);\n        /** @type {boolean} */\n        this._miningEnabled = false;\n        /** @type {Array.<{minNonce: number, maxNonce: number}>} */\n        this._activeNonces = [];\n        /** @type {Block} */\n        this._block = null;\n        /** @type {number} */\n        this._noncesPerRun = 256;\n        /** @type {Observable} */\n        this._observable = new Observable();\n        /** @type {number} */\n        this._shareCompact = Policy.BLOCK_TARGET_MAX;\n        /** @type {number} */\n        this._runsPerCycle = Infinity;\n        /** @type {number} */\n        this._cycleWait = 100;\n\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superUpdateToSize = super._updateToSize;\n\n        if (PlatformUtils.isNodeJs()) {\n            /**\n             * @param {SerialBuffer} blockHeader\n             * @param {number} compact\n             * @param {number} minNonce\n             * @param {number} maxNonce\n             * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n             */\n            this.multiMine = function (blockHeader, compact, minNonce, maxNonce) {\n                return new Promise((resolve, fail) => {\n                    NodeNative.node_argon2_target_async(async (nonce) => {\n                        try {\n                            if (nonce === maxNonce) {\n                                resolve(false);\n                            } else {\n                                blockHeader.writePos -= 4;\n                                blockHeader.writeUint32(nonce);\n                                const hash = await (await CryptoWorker.getInstanceAsync()).computeArgon2d(blockHeader);\n                                resolve({hash, nonce});\n                            }\n                        } catch (e) {\n                            fail(e);\n                        }\n                    }, blockHeader, compact, minNonce, maxNonce, 512);\n                });\n            };\n        }\n    }\n\n    /**\n     * @type {number}\n     */\n    get noncesPerRun() {\n        return this._noncesPerRun;\n    }\n\n    /**\n     * @param {number} nonces\n     */\n    set noncesPerRun(nonces) {\n        this._noncesPerRun = nonces;\n    }\n\n    /**\n     * @type {number}\n     */\n    get runsPerCycle() {\n        return this._runsPerCycle;\n    }\n\n    /**\n     * @param {number} runsPerCycle\n     */\n    set runsPerCycle(runsPerCycle) {\n        this._runsPerCycle = runsPerCycle;\n    }\n\n    /**\n     * @type {number}\n     */\n    get cycleWait() {\n        return this._cycleWait;\n    }\n\n    /**\n     * @param {number} cycleWait\n     */\n    set cycleWait(cycleWait) {\n        this._cycleWait = cycleWait;\n    }\n\n    /**\n     * @param {string} type\n     * @param {Function} callback\n     * @return {number}\n     */\n    on(type, callback) { this._observable.on(type, callback); }\n\n    /**\n     * @param {string} type\n     * @param {number} id\n     */\n    off(type, id) { this._observable.off(type, id); }\n\n    /**\n     * @param {Block} block\n     * @param {number} [shareCompact] target of a share, in compact format.\n     */\n    async startMiningOnBlock(block, shareCompact) {\n        this._block = block;\n        this._shareCompact = shareCompact || block.nBits;\n        if (!this._miningEnabled) {\n            await this._updateToSize();\n            this._activeNonces = [];\n            this._miningEnabled = true;\n            for (let i = 0; i < this.poolSize; ++i) {\n                this._startMiner();\n            }\n        } else {\n            this._activeNonces = [{minNonce:0, maxNonce:0}];\n        }\n    }\n\n    stop() {\n        this._miningEnabled = false;\n    }\n\n    async _updateToSize() {\n        if (!PlatformUtils.isNodeJs()) {\n            await this._superUpdateToSize.call(this);\n        }\n\n        while (this._miningEnabled && this._activeNonces.length < this.poolSize) {\n            this._startMiner();\n        }\n    }\n\n    _startMiner() {\n        if (this._activeNonces.length >= this.poolSize) {\n            return;\n        }\n\n        const minNonce = this._activeNonces.length === 0 ? 0 : Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n        const maxNonce = minNonce + this._noncesPerRun;\n        const nonceRange = {minNonce, maxNonce};\n        this._activeNonces.push(nonceRange);\n        this._singleMiner(nonceRange).catch((e) => Log.e(MinerWorkerPool, e));\n    }\n\n    /**\n     * @param {{minNonce: number, maxNonce: number}} nonceRange\n     * @return {Promise.<void>}\n     * @private\n     */\n    async _singleMiner(nonceRange) {\n        let i = 0;\n        while (this._miningEnabled && (IWorker.areWorkersAsync || PlatformUtils.isNodeJs() || i === 0) && i < this._runsPerCycle) {\n            i++;\n            const block = this._block;\n            const result = await this.multiMine(block.header.serialize(), this._shareCompact, nonceRange.minNonce, nonceRange.maxNonce);\n            if (result) {\n                const hash = new Hash(result.hash);\n                this._observable.fire('share', {\n                    block,\n                    nonce: result.nonce,\n                    hash\n                });\n            } else {\n                this._observable.fire('no-share', {\n                    nonce: nonceRange.maxNonce\n                });\n            }\n            if (this._activeNonces.length > this.poolSize) {\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1);\n                return;\n            } else {\n                const newMin = Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n                const newRange = {minNonce: newMin, maxNonce: newMin + this._noncesPerRun};\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1, newRange);\n                nonceRange = newRange;\n            }\n        }\n        if (this._miningEnabled) {\n            setTimeout(() => this._singleMiner(nonceRange), this._cycleWait);\n        }\n    }\n}\n\nClass.register(MinerWorkerPool);\n","class GenesisConfig {}\nClass.register(GenesisConfig);\n","class ArrayUtils {\n    /**\n     * @template T\n     * @param {Array.<T>} arr\n     * @return {T}\n     */\n    static randomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * @param {Uint8Array} uintarr\n     * @param {number} begin\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    static subarray(uintarr, begin, end) {\n        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n\n    /**\n     * @param {Array} list\n     * @param {number} k\n     * @return {Generator}\n     */\n    static *k_combinations(list, k) {\n        const n = list.length;\n        // Shortcut:\n        if (k > n) {\n            return;\n        }\n        const indices = Array.from(new Array(k), (x,i) => i);\n        yield indices.map(i => list[i]);\n        const reverseRange = Array.from(new Array(k), (x,i) => k-i-1);\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n            let i = k-1, found = false;\n            for (i of reverseRange) {\n                if (indices[i] !== i + n - k) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return;\n            }\n            indices[i] += 1;\n            for (const j of Array.from(new Array(k-i-1), (x,k) => i+k+1)) {\n                indices[j] = indices[j-1] + 1;\n            }\n            yield indices.map(i => list[i]);\n        }\n    }\n}\nClass.register(ArrayUtils);\n","class Assert {\n    /**\n     * @param {boolean} condition\n     * @param {string} [message]\n     * @returns {void}\n     */\n    static that(condition, message = 'Assertion failed') {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nClass.register(Assert);\n","class MerkleTree {\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    static computeRoot(values, fnHash = MerkleTree._hash) {\n        return MerkleTree._computeRoot(values, fnHash);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} fnHash\n     * @returns {Hash}\n     * @private\n     */\n    static _computeRoot(values, fnHash) {\n        const len = values.length;\n        if (len === 0) {\n            return Hash.light(new Uint8Array(0));\n        }\n        if (len === 1) {\n            return fnHash(values[0]);\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const leftHash = MerkleTree._computeRoot(left, fnHash);\n        const rightHash = MerkleTree._computeRoot(right, fnHash);\n        return Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n    }\n\n    /**\n     * @param {Hash|Uint8Array|{hash: function():Hash}|{serialize: function():Uint8Array}} o\n     * @returns {Hash}\n     * @private\n     */\n    static _hash(o) {\n        if (o instanceof Hash) {\n            return o;\n        }\n        if (typeof o.hash === 'function') {\n            return o.hash();\n        }\n        if (typeof o.serialize === 'function') {\n            return Hash.light(o.serialize());\n        }\n        if (o instanceof Uint8Array) {\n            return Hash.light(o);\n        }\n        throw new Error('MerkleTree objects must be Uint8Array or have a .hash()/.serialize() method');\n    }\n}\nClass.register(MerkleTree);\n","class MerklePath {\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     */\n    constructor(nodes) {\n        if (!Array.isArray(nodes) || !NumberUtils.isUint8(nodes.length)\n            || nodes.some(it => !(it instanceof MerklePathNode))) throw new Error('Malformed nodes');\n        /**\n         * @type {Array.<MerklePathNode>}\n         * @private\n         */\n        this._nodes = nodes;\n    }\n\n    /**\n     * @param {Array} values\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerklePath}\n     */\n    static compute(values, leafValue, fnHash = MerkleTree._hash) {\n        const leafHash = fnHash(leafValue);\n        const path = [];\n        MerklePath._compute(values, leafHash, path, fnHash);\n        return new MerklePath(path);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Hash} leafHash\n     * @param {Array.<MerklePathNode>} path\n     * @param {function(o: *):Hash} fnHash\n     * @returns {{containsLeaf:boolean, inner:Hash}}\n     * @private\n     */\n    static _compute(values, leafHash, path, fnHash) {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            return {containsLeaf: hash.equals(leafHash), inner: hash};\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, inner: leftHash} = MerklePath._compute(left, leafHash, path, fnHash);\n        const {containsLeaf: rightLeaf, inner: rightHash} = MerklePath._compute(right, leafHash, path, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        if (leftLeaf) {\n            path.push(new MerklePathNode(rightHash, false));\n            return {containsLeaf: true, inner: hash};\n        } else if (rightLeaf) {\n            path.push(new MerklePathNode(leftHash, true));\n            return {containsLeaf: true, inner: hash};\n        }\n\n        return {containsLeaf: false, inner: hash};\n    }\n\n    /**\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    computeRoot(leafValue, fnHash = MerkleTree._hash) {\n        /** @type {Hash} */\n        let root = fnHash(leafValue);\n        for (const node of this._nodes) {\n            const left = node.left;\n            const hash = node.hash;\n            const concat = new SerialBuffer(hash.serializedSize * 2);\n            if (left) hash.serialize(concat);\n            root.serialize(concat);\n            if (!left) hash.serialize(concat);\n            root = Hash.light(concat);\n        }\n        return root;\n    }\n\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _compress(nodes) {\n        const count = nodes.length;\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = new Uint8Array(leftBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            if (nodes[i].left) {\n                leftBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return leftBits;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MerklePath}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint8();\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = buf.read(leftBitsSize);\n\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            const left = (leftBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            const hash = Hash.unserialize(buf);\n            nodes.push(new MerklePathNode(hash, left));\n        }\n        return new MerklePath(nodes);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._nodes.length);\n        buf.write(MerklePath._compress(this._nodes));\n\n        for (const node of this._nodes) {\n            node.hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        const leftBitsSize = Math.ceil(this._nodes.length / 8);\n        return /*count*/ 1\n            + leftBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {MerklePath} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePath\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]));\n    }\n\n    /** @type {Array.<MerklePathNode>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\nClass.register(MerklePath);\n\nclass MerklePathNode {\n    /**\n     * @param {Hash} hash\n     * @param {boolean} left\n     */\n    constructor(hash, left) {\n        this._hash = hash;\n        this._left = left;\n    }\n\n    /** @type {Hash} */\n    get hash() {\n        return this._hash;\n    }\n\n    /** @type {boolean} */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     * @param {MerklePathNode} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePathNode\n            && this._hash.equals(o.hash)\n            && this._left === o.left;\n    }\n}\nClass.register(MerklePathNode);\n","class Policy {\n    /**\n     * Convert Nimiq decimal to Number of Satoshis.\n     * @param {number} coins Nimiq count in decimal\n     * @return {number} Number of Satoshis\n     */\n    static coinsToSatoshis(coins) {\n        return Math.round(coins * Policy.SATOSHIS_PER_COIN);\n    }\n\n    /**\n     * Convert Number of Satoshis to Nimiq decimal.\n     * @param {number} satoshis Number of Satoshis.\n     * @return {number} Nimiq count in decimal.\n     */\n    static satoshisToCoins(satoshis) {\n        return satoshis / Policy.SATOSHIS_PER_COIN;\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static supplyAfter(blockHeight) {\n        // Calculate last entry in supply cache that is below blockHeight.\n        let startHeight = Math.floor(blockHeight / Policy._supplyCacheInterval) * Policy._supplyCacheInterval;\n        startHeight = Math.max(0, Math.min(startHeight, Policy._supplyCacheMax));\n\n        // Calculate respective block for the last entry of the cache and the targeted height.\n        const startI = startHeight / Policy._supplyCacheInterval;\n        const endI = Math.floor(blockHeight / Policy._supplyCacheInterval);\n\n        // The starting supply is the initial supply at the beginning and a cached value afterwards.\n        let supply = startHeight === 0 ? Policy.INITIAL_SUPPLY : Policy._supplyCache.get(startHeight);\n        // Use and update cache.\n        for (let i = startI; i < endI; ++i) {\n            startHeight = i * Policy._supplyCacheInterval;\n            // Since the cache stores the supply *before* a certain block, subtract one.\n            const endHeight = (i + 1) * Policy._supplyCacheInterval - 1;\n            supply = Policy._supplyAfter(supply, endHeight, startHeight);\n            // Don't forget to add one again.\n            Policy._supplyCache.set(endHeight + 1, supply);\n            Policy._supplyCacheMax = endHeight + 1;\n        }\n\n        // Calculate remaining supply (this also adds the block reward for endI*interval).\n        return Policy._supplyAfter(supply, blockHeight, endI * Policy._supplyCacheInterval);\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} initialSupply\n     * @param {number} blockHeight\n     * @param {number} [startHeight]\n     * @return {number}\n     */\n    static _supplyAfter(initialSupply, blockHeight, startHeight=0) {\n        let supply = initialSupply;\n        for (let i = startHeight; i <= blockHeight; ++i) {\n            supply += Policy._blockRewardAt(supply, i);\n        }\n        return supply;\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static blockRewardAt(blockHeight) {\n        const currentSupply = Policy.supplyAfter(blockHeight - 1);\n        return Policy._blockRewardAt(currentSupply, blockHeight);\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} currentSupply\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static _blockRewardAt(currentSupply, blockHeight) {\n        if (blockHeight <= 0) return 0;\n        const remaining = Policy.TOTAL_SUPPLY - currentSupply;\n        if (blockHeight >= Policy.EMISSION_TAIL_START && remaining >= Policy.EMISSION_TAIL_REWARD) {\n            return Policy.EMISSION_TAIL_REWARD;\n        }\n        const remainder = remaining % Policy.EMISSION_SPEED;\n        return (remaining - remainder) / Policy.EMISSION_SPEED;\n    }\n}\n\n/**\n * Targeted block time in seconds.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_TIME = 60;\n\n/**\n * Maximum block size in bytes.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_SIZE_MAX = 1e5; // 100 kb\n\n/**\n * The highest (easiest) block PoW target.\n * @type {BigNumber}\n * @constant\n */\nPolicy.BLOCK_TARGET_MAX = new BigNumber(2).pow(240);\n\n/**\n * Number of blocks we take into account to calculate next difficulty.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_BLOCK_WINDOW = 120;\n\n/**\n * Limits the rate at which the difficulty is adjusted min/max.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR = 2;\n\n/**\n * Number of blocks a transaction is valid.\n * @type {number}\n * @constant\n */\nPolicy.TRANSACTION_VALIDITY_WINDOW = 120;\n\n\n/* Supply & Emission Parameters */\n\n/**\n * Number of Satoshis per Nimiq.\n * @type {number}\n * @constant\n */\nPolicy.SATOSHIS_PER_COIN = 1e5;\n\n/**\n * Targeted total supply in satoshis.\n * @type {number}\n * @constant\n */\nPolicy.TOTAL_SUPPLY = 21e14;\n\n/**\n * Initial supply before genesis block in satoshis.\n * FIXME: Change for main net.\n * @type {number}\n * @constant\n */\nPolicy.INITIAL_SUPPLY = 252000000000000;\n\n/**\n * Emission speed.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_SPEED = Math.pow(2, 22);\n\n/**\n * First block using constant tail emission until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_START = 48692960;\n\n/**\n * Constant tail emission in satoshis until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_REWARD = 4000;\n\n/* Security parameters */\n\n/**\n * NIPoPoW Security parameter M\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.M = 240;\n\n/**\n * NIPoPoW Security parameter K\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.K = 120;\n\n/**\n * NIPoPoW Security parameter DELTA\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.DELTA = 0.15;\n\n/**\n * Number of blocks the light client downloads to verify the AccountsTree construction.\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.NUM_BLOCKS_VERIFICATION = 250;\n\n\n/* Snapshot Parameters */\n\n/**\n * Maximum number of snapshots.\n * @type {number}\n * @constant\n */\nPolicy.NUM_SNAPSHOTS_MAX = 20;\n\n\n/**\n * Stores the circulating supply before the given block.\n * @type {Map.<number, number>}\n * @private\n */\nPolicy._supplyCache = new Map();\nPolicy._supplyCacheMax = 0; // blocks\nPolicy._supplyCacheInterval = 5000; // blocks\nClass.register(Policy);\n","/**\n * @abstract\n */\nclass Serializable {\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Serializable && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return BufferUtils.compare(this.serialize(), o.serialize());\n    }\n\n    hashCode() {\n        return this.toBase64();\n    }\n\n    /**\n     * @abstract\n     * @param {SerialBuffer} [buf]\n     */\n    serialize(buf) {}\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.toBase64();\n    }\n\n    /**\n     * @return {string}\n     */\n    toBase64() {\n        return BufferUtils.toBase64(this.serialize());\n    }\n\n    /**\n     * @return {string}\n     */\n    toHex() {\n        return BufferUtils.toHex(this.serialize());\n    }\n}\n\nClass.register(Serializable);\n","class Hash extends Serializable {\n    /**\n     * @param {?Uint8Array} arg\n     * @param {Hash.Algorithm} [algorithm]\n     * @private\n     */\n    constructor(arg, algorithm = Hash.Algorithm.BLAKE2B) {\n        if (arg === null) {\n            arg = new Uint8Array(Hash.getSize(algorithm));\n        } else {\n            if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n            if (arg.length !== Hash.getSize(algorithm)) throw new Error('Primitive: Invalid length');\n        }\n        super();\n        this._obj = arg;\n        /** @type {Hash.Algorithm} */\n        this._algorithm = algorithm;\n    }\n\n    /**\n     * @deprecated\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static light(arr) {\n        return Hash.blake2b(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static blake2b(arr) {\n        return new Hash(Hash.computeBlake2b(arr), Hash.Algorithm.BLAKE2B);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @deprecated\n     * @returns {Promise.<Hash>}\n     */\n    static hard(arr) {\n        return Hash.argon2d(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Promise.<Hash>}\n     */\n    static async argon2d(arr) {\n        return new Hash(await (await CryptoWorker.getInstanceAsync()).computeArgon2d(arr), Hash.Algorithm.ARGON2D);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha256(arr) {\n        return new Hash(Hash.computeSha256(arr), Hash.Algorithm.SHA256);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha512(arr) {\n        return new Hash(Hash.computeSha512(arr), Hash.Algorithm.SHA512);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @param {Hash.Algorithm} algorithm\n     * @returns {Hash}\n     */\n    static compute(arr, algorithm) {\n        // !! The algorithms supported by this function are the allowed hash algorithms for HTLCs !!\n        switch (algorithm) {\n            case Hash.Algorithm.BLAKE2B: return Hash.blake2b(arr);\n            case Hash.Algorithm.SHA256: return Hash.sha256(arr);\n            // Hash.Algorithm.SHA512 postponed until hard-fork\n            // Hash.Algorithm.ARGON2 intentionally omitted\n            default: throw new Error('Invalid hash algorithm');\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash.Algorithm} [algorithm]\n     * @returns {Hash}\n     */\n    static unserialize(buf, algorithm = Hash.Algorithm.BLAKE2B) {\n        return new Hash(buf.read(Hash.getSize(algorithm)), algorithm);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /**\n     * @param {number} begin\n     * @param {number} end\n     * @returns {Uint8Array}\n     */\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Hash.SIZE.get(this._algorithm);\n    }\n\n    /** @type {Uint8Array} */\n    get array() {\n        return this._obj;\n    }\n\n    /** @type {Hash.Algorithm} */\n    get algorithm() {\n        return this._algorithm;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Hash && o._algorithm === this._algorithm && super.equals(o);\n    }\n\n    /**\n     * @param {string} base64\n     * @returns {Hash}\n     */\n    static fromBase64(base64) {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @returns {Hash}\n     */\n    static fromHex(hex) {\n        return new Hash(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Hash}\n     */\n    static fromString(str) {\n        try {\n            return Hash.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Hash.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid hash format');\n    }\n\n    /**\n     * @param {Hash} o\n     * @returns {boolean}\n     */\n    static isHash(o) {\n        return o instanceof Hash;\n    }\n\n    /**\n     * @param {Hash.Algorithm} algorithm\n     * @returns {number}\n     */\n    static getSize(algorithm) {\n        const size = Hash.SIZE.get(algorithm);\n        if (typeof size !== 'number') throw new Error('Invalid hash algorithm');\n        return size;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeBlake2b(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.BLAKE2B));\n            NodeNative.node_blake2(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.BLAKE2B);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_blake2(wasmOut, wasmIn, input.length);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha256(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));\n            NodeNative.node_sha256(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA256);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha256(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha512(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_sha512(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha512(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\n/**\n * @enum {number}\n */\nHash.Algorithm = {\n    BLAKE2B: 1,\n    ARGON2D: 2,\n    SHA256: 3,\n    SHA512: 4\n};\n/**\n * @type {Map<Hash.Algorithm, number>}\n */\nHash.SIZE = new Map();\nHash.SIZE.set(Hash.Algorithm.BLAKE2B, 32);\nHash.SIZE.set(Hash.Algorithm.ARGON2D, 32);\nHash.SIZE.set(Hash.Algorithm.SHA256, 32);\nHash.SIZE.set(Hash.Algorithm.SHA512, 64);\n\nHash.NULL = new Hash(new Uint8Array(32));\nClass.register(Hash);\n","class PublicKey extends Serializable {\n    /**\n     * @param {PublicKey} o\n     * @returns {PublicKey}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new PublicKey(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PublicKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {PublicKey}\n     */\n    static derive(privateKey) {\n        return new PublicKey(PublicKey._publicKeyDerive(privateKey._obj));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @return {PublicKey}\n     */\n    static sum(publicKeys) {\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        return PublicKey._delinearizeAndAggregatePublicKeys(publicKeys);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PublicKey}\n     */\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PublicKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PublicKey.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PublicKey && super.equals(o);\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        return Hash.light(this.serialize());\n    }\n\n    /**\n     * @param {PublicKey} o\n     * @return {number}\n     */\n    compare(o) {\n        return BufferUtils.compare(this._obj, o._obj);\n    }\n\n    /**\n     * @return {Address}\n     */\n    toAddress() {\n        return Address.fromHash(this.hash());\n    }\n\n    /**\n     * @return {PeerId}\n     */\n    toPeerId() {\n        return new PeerId(this.hash().subarray(0, 16));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @returns {PublicKey}\n     */\n    static _delinearizeAndAggregatePublicKeys(publicKeys) {\n        const publicKeysObj = publicKeys.map(k => k.serialize());\n        const publicKeysHash = PublicKey._publicKeysHash(publicKeysObj);\n        const raw = PublicKey._publicKeysDelinearizeAndAggregate(publicKeysObj, publicKeysHash);\n        return new PublicKey(raw);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDerive(privateKey) {\n        if (privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_public_key_derive(out, new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const pubKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOut, PrivateKey.SIZE);\n                pubKeyBuffer.set(privateKey);\n                const wasmIn = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmIn, PrivateKey.SIZE);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_public_key_derive(wasmOut, wasmIn);\n                privKeyBuffer.fill(0);\n                const publicKey = new Uint8Array(PublicKey.SIZE);\n                publicKey.set(pubKeyBuffer);\n                return publicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @returns {Uint8Array}\n     */\n    static _publicKeysHash(publicKeys) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_ed25519_hash_public_keys(out, concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                Module._ed25519_hash_public_keys(wasmOut, wasmInPublicKeys, publicKeys.length);\n                const hashedPublicKey = new Uint8Array(hashSize);\n                hashedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hashedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDelinearize(publicKey, publicKeysHash) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_delinearize_public_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_delinearize_public_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey);\n                const delinearizedPublicKey = new Uint8Array(PublicKey.SIZE);\n                delinearizedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return delinearizedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeysDelinearizeAndAggregate(publicKeys, publicKeysHash) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_delinearized_public_keys(out, new Uint8Array(publicKeysHash), concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_aggregate_delinearized_public_keys(wasmOut, wasmInPublicKeysHash, wasmInPublicKeys, publicKeys.length);\n                const aggregatePublicKey = new Uint8Array(PublicKey.SIZE);\n                aggregatePublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggregatePublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPublicKey.SIZE = 32;\n\nClass.register(PublicKey);\n","class Signature extends Serializable {\n    /**\n     * @param {Signature} o\n     * @returns {Signature}\n     */\n    static copy(o) {\n        if (!o) return o;\n        // FIXME Move this to Crypto class.\n        const obj = new Uint8Array(o._obj);\n        return new Signature(obj);\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Signature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {Signature}\n     */\n    static create(privateKey, publicKey, data) {\n        return new Signature(Signature._signatureCreate(privateKey._obj, publicKey._obj, data));\n    }\n\n    /**\n     * @param {Commitment} commitment\n     * @param {Array.<PartialSignature>} signatures\n     * @return {Signature}\n     */\n    static fromPartialSignatures(commitment, signatures) {\n        const raw = Signature._combinePartialSignatures(commitment.serialize(), signatures.map(s => s.serialize()));\n        return new Signature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Signature}\n     */\n    static unserialize(buf) {\n        return new Signature(buf.read(Signature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Signature.SIZE;\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {boolean}\n     */\n    verify(publicKey, data) {\n        return Signature._signatureVerify(publicKey._obj, data, this._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Signature && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} combinedCommitment\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _combinePartialSignatures(combinedCommitment, partialSignatures) {\n        const combinedSignature = Signature._aggregatePartialSignatures(partialSignatures);\n        return BufferUtils.concatTypedArrays(combinedCommitment, combinedSignature);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _aggregatePartialSignatures(partialSignatures) {\n        return partialSignatures.reduce((sigA, sigB) => Signature._scalarsAdd(sigA, sigB));\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @returns {Uint8Array}\n     */\n    static _scalarsAdd(a, b) {\n        if (a.byteLength !== PartialSignature.SIZE || b.byteLength !== PartialSignature.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_add_scalars(out, new Uint8Array(a), new Uint8Array(b));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSum = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInA = Module.stackAlloc(a.length);\n                const wasmInB = Module.stackAlloc(b.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInA, a.length).set(a);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInB, b.length).set(b);\n                Module._ed25519_add_scalars(wasmOutSum, wasmInA, wasmInB);\n                const sum = new Uint8Array(PartialSignature.SIZE);\n                sum.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSum, PartialSignature.SIZE));\n                return sum;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _signatureCreate(privateKey, publicKey, message) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Signature.SIZE);\n            NodeNative.node_ed25519_sign(out, new Uint8Array(message), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSignature = Module.stackAlloc(Signature.SIZE);\n                const signatureBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOutSignature, Signature.SIZE);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInPrivKey = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmInPrivKey, privateKey.length);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_sign(wasmOutSignature, wasmInMessage, message.byteLength, wasmInPubKey, wasmInPrivKey);\n                privKeyBuffer.fill(0);\n\n                const signature = new Uint8Array(Signature.SIZE);\n                signature.set(signatureBuffer);\n                return signature;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    static _signatureVerify(publicKey, message, signature) {\n        if (PlatformUtils.isNodeJs()) {\n            return !!NodeNative.node_ed25519_verify(new Uint8Array(signature), new Uint8Array(message), new Uint8Array(publicKey));\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInSignature = Module.stackAlloc(signature.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInSignature, signature.length).set(signature);\n\n                return !!Module._ed25519_verify(wasmInSignature, wasmInMessage, message.byteLength, wasmInPubKey);\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nSignature.SIZE = 64;\n\nClass.register(Signature);\n","class Address extends Serializable {\n    /**\n     * @param {Address} o\n     * @returns {Address}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Address(obj);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Address}\n     */\n    static fromHash(hash) {\n        return new Address(hash.subarray(0, Address.SERIALIZED_SIZE));\n    }\n\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Address.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Address} Newly created Account object.\n     */\n    static unserialize(buf) {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Address\n            && super.equals(o);\n    }\n\n    static fromString(str) {\n        try {\n            return Address.fromUserFriendlyAddress(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid address format');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {Address}\n     */\n    static fromBase64(base64) {\n        return new Address(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @return {Address}\n     */\n    static fromHex(hex) {\n        return new Address(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @return {Address}\n     */\n    static fromUserFriendlyAddress(str) {\n        str = str.replace(/ /g, '');\n        if (str.substr(0, 2).toUpperCase() !== Address.CCODE) {\n            throw new Error('Invalid Address: Wrong country code');\n        }\n        if (str.length !== 36) {\n            throw new Error('Invalid Address: Should be 36 chars (ignoring spaces)');\n        }\n        if (Address._ibanCheck(str.substr(4) + str.substr(0, 4)) !== 1) {\n            throw new Error('Invalid Address: Checksum invalid');\n        }\n        return new Address(BufferUtils.fromBase32(str.substr(4)));\n    }\n\n    static _ibanCheck(str) {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6)) % 97).toString();\n        }\n\n        return parseInt(tmp);\n    }\n\n    /**\n     * @param {boolean} [withSpaces]\n     * @return {string}\n     */\n    toUserFriendlyAddress(withSpaces = true) {\n        const base32 = BufferUtils.toBase32(this.serialize());\n        // eslint-disable-next-line prefer-template\n        const check = ('00' + (98 - Address._ibanCheck(base32 + Address.CCODE + '00'))).slice(-2);\n        let res = Address.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n}\nAddress.CCODE = 'NQ';\nAddress.SERIALIZED_SIZE = 20;\nAddress.HEX_SIZE = 40;\nAddress.NULL = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nAddress.CONTRACT_CREATION = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nClass.register(Address);\n","/**\n * @abstract\n */\nclass Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint64(balance)) throw new Error('Malformed balance');\n\n        /** @type {Account.Type} */\n        this._type = type;\n        /** @type {number} */\n        this._balance = balance;\n    }\n\n    /**\n     * Create Account object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Account} Newly created Account object.\n     */\n    static unserialize(buf) {\n        const type = /** @type {Account.Type} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Account.TYPE_MAP.has(type)) {\n            throw new Error('Unknown account type');\n        }\n\n        return Account.TYPE_MAP.get(type).unserialize(buf);\n    }\n\n    /**\n     * Serialize this Account object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeUint64(this._balance);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return /*type*/ 1\n            + /*balance*/ 8;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    toString() {\n        return `Account{type=${this._type}, balance=${this._balance.toString()}`;\n    }\n\n    /**\n     * @type {number} Account balance\n     */\n    get balance() {\n        return this._balance;\n    }\n\n    /** @type {Account.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) { throw new Error('Not yet implemented.'); }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            if (transactionsCache.containsTransaction(transaction)) {\n                throw new Error('Double Transaction Error!');\n            }\n            return this.withBalance(newBalance);\n        } else {\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            return this.withBalance(this._balance + transaction.value + transaction.fee);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            return this.withBalance(this._balance + transaction.value);\n        } else {\n            const newBalance = this._balance - transaction.value;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            return this.withBalance(newBalance);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this === Account.INITIAL;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isToBePruned() {\n        return this._balance === 0 && !this.isInitial();\n    }\n}\n\n/**\n * Enum for Account types.\n * Non-zero values are contracts.\n * @enum\n */\nAccount.Type = {\n    /**\n     * Basic account type.\n     * @see {BasicAccount}\n     */\n    BASIC: 0,\n    /**\n     * Account with vesting functionality.\n     * @see {VestingContract}\n     */\n    VESTING: 1,\n    /**\n     * Hashed Time-Locked Contract\n     * @see {HashedTimeLockedContract}\n     */\n    HTLC: 2\n};\n/**\n * @type {Map.<Account.Type, {copy: function(o: *):Account, unserialize: function(buf: SerialBuffer):Account, create: function(balance: number, blockHeight: number, transaction: Transaction):Account, verifyOutgoingTransaction: function(transaction: Transaction):Promise.<boolean>, verifyIncomingTransaction: function(transaction: Transaction):Promise.<boolean>}>}\n */\nAccount.TYPE_MAP = new Map();\n\nClass.register(Account);\n","class PrunedAccount {\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     */\n    constructor(address, account) {\n        if (!(address instanceof Address)) throw new Error('Malformed address');\n\n        /** @type {Address} */\n        this._address = address;\n        /** @type {Account} */\n        this._account = account;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {PrunedAccount}\n     */\n    static unserialize(buf) {\n        return new PrunedAccount(Address.unserialize(buf), Account.unserialize(buf));\n    }\n\n    /**\n     * @param {PrunedAccount} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return this._address.compare(o._address);\n    }\n\n    /**\n     * @returns {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * @returns {Account}\n     */\n    get account() {\n        return this._account;\n    }\n\n    /**\n     * @param buf\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._address.serialize(buf);\n        this._account.serialize(buf);\n        return this;\n    }\n\n    get serializedSize() {\n        return this._address.serializedSize + this._account.serializedSize;\n    }\n}\n\nClass.register(PrunedAccount);\n","/**\n * This is a classic account that can send all his funds and receive any transaction.\n * All outgoing transactions are signed using the key corresponding to this address.\n */\nclass BasicAccount extends Account {\n    /**\n     * @param {BasicAccount} o\n     * @returns {BasicAccount}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new BasicAccount(o._balance);\n    }\n\n    /**\n     * @param {number} [balance]\n     */\n    constructor(balance = 0) {\n        super(Account.Type.BASIC, balance);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BasicAccount}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.BASIC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof BasicAccount\n            && this._type === o._type\n            && this._balance === o._balance;\n    }\n\n    toString() {\n        return `BasicAccount{balance=${this._balance}}`;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        return SignatureProof.verifyTransaction(transaction);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (transaction.data.byteLength > 64) return false;\n        return true;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            const isContractCreation = transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION);\n            const isTypeChange = transaction.recipientType !== this._type;\n            if (isContractCreation !== isTypeChange) {\n                throw new Error('Data Error!');\n            }\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.recipientType !== this._type && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract creation\n            return Account.TYPE_MAP.get(transaction.recipientType).create(this._balance, blockHeight, transaction);\n        }\n        return this;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this._balance === 0;\n    }\n}\n\nAccount.INITIAL = new BasicAccount(0);\nAccount.TYPE_MAP.set(Account.Type.BASIC, BasicAccount);\nClass.register(BasicAccount);\n","class Contract extends Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        super(type, balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (!transaction.recipient.equals(transaction.getContractCreationAddress())) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract already created\n            throw new Error('Data error');\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Revert contract creation\n            return new BasicAccount(this.balance);\n        }\n        return this;\n    }\n}\n\nClass.register(Contract);\n","class HashedTimeLockedContract extends Contract {\n    /**\n     * @param {number} balance\n     * @param {Address} sender\n     * @param {Address} recipient\n     * @param {Hash} hashRoot\n     * @param {number} hashCount\n     * @param {number} timeout\n     * @param {number} totalAmount\n     */\n    constructor(balance = 0, sender = Address.NULL, recipient = Address.NULL, hashRoot = Hash.NULL, hashCount = 1, timeout = 0, totalAmount = balance) {\n        super(Account.Type.HTLC, balance);\n        if (!(sender instanceof Address)) throw new Error('Malformed address');\n        if (!(recipient instanceof Address)) throw new Error('Malformed address');\n        if (!(hashRoot instanceof Hash)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint8(hashCount) || hashCount === 0) throw new Error('Malformed hashCount');\n        if (!NumberUtils.isUint32(timeout)) throw new Error('Malformed timeout');\n        if (!NumberUtils.isUint64(totalAmount)) throw new Error('Malformed totalAmount');\n\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Hash} */\n        this._hashRoot = hashRoot;\n        /** @type {number} */\n        this._hashCount = hashCount;\n        /** @type {number} */\n        this._timeout = timeout;\n        /** @type {number} */\n        this._totalAmount = totalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        const buf = new SerialBuffer(transaction.data);\n\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {HashedTimeLockedContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.HTLC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n        const totalAmount = buf.readUint64();\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout, totalAmount);\n    }\n\n\n    /**\n     * Serialize this HTLC object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._sender.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._hashRoot.algorithm);\n        this._hashRoot.serialize(buf);\n        buf.writeUint8(this._hashCount);\n        buf.writeUint32(this._timeout);\n        buf.writeUint64(this._totalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._sender.serializedSize\n            + this._recipient.serializedSize\n            + /*hashAlgorithm*/ 1\n            + this._hashRoot.serializedSize\n            + /*hashCount*/ 1\n            + /*timeout*/ 4\n            + /*totalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Hash} */\n    get hashRoot() {\n        return this._hashRoot;\n    }\n\n    /** @type {number} */\n    get hashCount() {\n        return this._hashCount;\n    }\n\n    /** @type {number} */\n    get timeout() {\n        return this._timeout;\n    }\n\n    /** @type {number} */\n    get totalAmount() {\n        return this._totalAmount;\n    }\n\n    toString() {\n        return `HashedTimeLockedContract{balance=${this._balance}, sender=${this._sender.toUserFriendlyAddress(false)}, recipient=${this._sender.toUserFriendlyAddress(false)}, amount=${this._totalAmount}/${this._hashCount}, timeout=${this._timeout}}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof HashedTimeLockedContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._sender.equals(o._sender)\n            && this._recipient.equals(o._recipient)\n            && this._hashRoot.equals(o._hashRoot)\n            && this._hashCount === o._hashCount\n            && this._timeout === o._timeout\n            && this._totalAmount === o._totalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.proof);\n            const type = buf.readUint8();\n            switch (type) {\n                case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                    const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                    const hashDepth = buf.readUint8();\n                    const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                    let preImage = Hash.unserialize(buf, hashAlgorithm);\n\n                    // Verify that the preImage hashed hashDepth times matches the _provided_ hashRoot.\n                    for (let i = 0; i < hashDepth; ++i) {\n                        preImage = Hash.compute(preImage.array, hashAlgorithm);\n                    }\n                    if (!hashRoot.equals(preImage)) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE:\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n\n            // Reject overlong proof.\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return true; // Accept\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.data);\n\n            Address.unserialize(buf); // sender address\n            Address.unserialize(buf); // recipient address\n            const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n            Hash.unserialize(buf, hashAlgorithm);\n            buf.readUint8(); // hash count\n            buf.readUint32(); // timeout\n\n            // Blacklist Argon2 hash function.\n            if (hashAlgorithm === Hash.Algorithm.ARGON2D) {\n                return false;\n            }\n\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return Contract.verifyIncomingTransaction(transaction);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new HashedTimeLockedContract(balance, this._sender, this._recipient, this._hashRoot, this._hashCount, this._timeout, this._totalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        const buf = new SerialBuffer(transaction.proof);\n        const type = buf.readUint8();\n        let minCap = 0;\n        switch (type) {\n            case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                // Check that the contract has not expired yet.\n                if (this._timeout < blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Check that the provided hashRoot is correct.\n                const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                const hashDepth = buf.readUint8();\n                const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                if (!hashRoot.equals(this._hashRoot)) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Ignore the preImage.\n                Hash.unserialize(buf, hashAlgorithm);\n\n                // Verify that the transaction is signed by the authorized recipient.\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                minCap = Math.max(0, Math.floor((1 - (hashDepth / this._hashCount)) * this._totalAmount));\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE: {\n                if (this._timeout >= blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            default:\n                throw new Error('Proof Error!');\n        }\n\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n        }\n\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n}\n\nHashedTimeLockedContract.ProofType = {\n    REGULAR_TRANSFER: 1,\n    EARLY_RESOLVE: 2,\n    TIMEOUT_RESOLVE: 3\n};\n\nAccount.TYPE_MAP.set(Account.Type.HTLC, HashedTimeLockedContract);\nClass.register(HashedTimeLockedContract);\n","class VestingContract extends Contract {\n    /**\n     * @param {number} [balance]\n     * @param {Address} [owner]\n     * @param {number} [vestingStart]\n     * @param {number} [vestingStepBlocks]\n     * @param {number} [vestingStepAmount]\n     * @param {number} [vestingTotalAmount]\n     */\n    constructor(balance = 0, owner = Address.NULL, vestingStart = 0, vestingStepBlocks = 0, vestingStepAmount = balance, vestingTotalAmount = balance) {\n        super(Account.Type.VESTING, balance);\n        if (!(owner instanceof Address)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint32(vestingStart)) throw new Error('Malformed vestingStart');\n        if (!NumberUtils.isUint32(vestingStepBlocks)) throw new Error('Malformed vestingStepBlocks');\n        if (!NumberUtils.isUint64(vestingStepAmount)) throw new Error('Malformed vestingStepAmount');\n        if (!NumberUtils.isUint64(vestingTotalAmount)) throw new Error('Malformed lowerCap');\n\n        /** @type {Address} */\n        this._owner = owner;\n        /** @type {number} */\n        this._vestingStart = vestingStart;\n        /** @type {number} */\n        this._vestingStepBlocks = vestingStepBlocks;\n        /** @type {number} */\n        this._vestingStepAmount = vestingStepAmount;\n        /** @type {number} */\n        this._vestingTotalAmount = vestingTotalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        /** @type {number} */\n        let vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount;\n        const buf = new SerialBuffer(transaction.data);\n        const owner = Address.unserialize(buf);\n        vestingTotalAmount = transaction.value;\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n                // Only block number: vest full amount at that block\n                vestingStart = 0;\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = vestingTotalAmount;\n                break;\n            case Address.SERIALIZED_SIZE + 16:\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                break;\n            case Address.SERIALIZED_SIZE + 24:\n                // Create a vesting account with some instantly vested funds or additional funds considered.\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                vestingTotalAmount = buf.readUint64();\n                break;\n            default:\n                throw new Error('Invalid transaction data');\n        }\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {VestingContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.VESTING) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const owner = Address.unserialize(buf);\n        const vestingStart = buf.readUint32();\n        const vestingStepBlocks = buf.readUint32();\n        const vestingStepAmount = buf.readUint64();\n        const vestingTotalAmount = buf.readUint64();\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * Serialize this VestingContract object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._owner.serialize(buf);\n        buf.writeUint32(this._vestingStart);\n        buf.writeUint32(this._vestingStepBlocks);\n        buf.writeUint64(this._vestingStepAmount);\n        buf.writeUint64(this._vestingTotalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._owner.serializedSize\n            + /*vestingStart*/ 4\n            + /*vestingStepBlocks*/ 4\n            + /*vestingStepAmount*/ 8\n            + /*vestingTotalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get owner() {\n        return this._owner;\n    }\n\n    /** @type {number} */\n    get vestingStart() {\n        return this._vestingStart;\n    }\n\n    /** @type {number} */\n    get vestingStepBlocks() {\n        return this._vestingStepBlocks;\n    }\n\n    /** @type {number} */\n    get vestingStepAmount() {\n        return this._vestingStepAmount;\n    }\n\n    /** @type {number} */\n    get vestingTotalAmount() {\n        return this._vestingTotalAmount;\n    }\n\n    toString() {\n        return `VestingAccount{balance=${this._balance}, owner=${this._owner.toUserFriendlyAddress()}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof VestingContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._owner.equals(o._owner)\n            && this._vestingStart === o._vestingStart\n            && this._vestingStepBlocks === o._vestingStepBlocks\n            && this._vestingStepAmount === o._vestingStepAmount\n            && this._vestingTotalAmount === o._vestingTotalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        const buf = new SerialBuffer(transaction.proof);\n\n        if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n            return false;\n        }\n\n        if (buf.readPos !== buf.byteLength) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n            case Address.SERIALIZED_SIZE + 16:\n            case Address.SERIALIZED_SIZE + 24:\n                return Contract.verifyIncomingTransaction(transaction);\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new VestingContract(balance, this._owner, this._vestingStart, this._vestingStepBlocks, this._vestingStepAmount, this._vestingTotalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const minCap = this.getMinCap(blockHeight);\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n\n            const buf = new SerialBuffer(transaction.proof);\n            if (!SignatureProof.unserialize(buf).isSignedBy(this._owner)) {\n                throw new Error('Proof Error!');\n            }\n        }\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n\n    /**\n     * @param {number} blockHeight\n     * @returns {number}\n     */\n    getMinCap(blockHeight) {\n        return this._vestingStepBlocks && this._vestingStepAmount > 0\n            ? Math.max(0, this._vestingTotalAmount - Math.floor((blockHeight - this._vestingStart) / this._vestingStepBlocks) * this._vestingStepAmount)\n            : 0;\n    }\n}\n\nAccount.TYPE_MAP.set(Account.Type.VESTING, VestingContract);\nClass.register(VestingContract);\n","class BlockHeader {\n    /**\n     * @param {Hash} prevHash\n     * @param {Hash} interlinkHash\n     * @param {Hash} bodyHash\n     * @param {Hash} accountsHash\n     * @param {number} nBits\n     * @param {number} height\n     * @param {number} timestamp\n     * @param {number} nonce\n     * @param {number} version\n     */\n    constructor(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version = BlockHeader.CURRENT_VERSION) {\n        if (!NumberUtils.isUint16(version)) throw 'Malformed version';\n        if (!Hash.isHash(prevHash)) throw 'Malformed prevHash';\n        if (!Hash.isHash(interlinkHash)) throw 'Malformed interlinkHash';\n        if (!Hash.isHash(bodyHash)) throw 'Malformed bodyHash';\n        if (!Hash.isHash(accountsHash)) throw 'Malformed accountsHash';\n        if (!NumberUtils.isUint32(nBits) || !BlockUtils.isValidCompact(nBits)) throw 'Malformed nBits';\n        if (!NumberUtils.isUint32(height)) throw 'Invalid height';\n        if (!NumberUtils.isUint32(timestamp)) throw 'Malformed timestamp';\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n\n        /** @type {number} */\n        this._version = version;\n        /** @type {Hash} */\n        this._prevHash = prevHash;\n        /** @type {Hash} */\n        this._interlinkHash = interlinkHash;\n        /** @type {Hash} */\n        this._bodyHash = bodyHash;\n        /** @type {Hash} */\n        this._accountsHash = accountsHash;\n        /** @type {number} */\n        this._nBits = nBits;\n        /** @type {number} */\n        this._height = height;\n        /** @type {number} */\n        this._timestamp = timestamp;\n        /** @type {number} */\n        this._nonce = nonce;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {BlockHeader}\n     */\n    static unserialize(buf) {\n        const version = buf.readUint16();\n        if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw new Error(`Unsupported block version ${version}`);\n        const prevHash = Hash.unserialize(buf);\n        const interlinkHash = Hash.unserialize(buf);\n        const bodyHash = Hash.unserialize(buf);\n        const accountsHash = Hash.unserialize(buf);\n        const nBits = buf.readUint32();\n        const height = buf.readUint32();\n        const timestamp = buf.readUint32();\n        const nonce = buf.readUint32();\n        return new BlockHeader(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._version);\n        this._prevHash.serialize(buf);\n        this._interlinkHash.serialize(buf);\n        this._bodyHash.serialize(buf);\n        this._accountsHash.serialize(buf);\n        buf.writeUint32(this._nBits);\n        buf.writeUint32(this._height);\n        buf.writeUint32(this._timestamp);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*version*/ 2\n            + this._prevHash.serializedSize\n            + this._interlinkHash.serializedSize\n            + this._bodyHash.serializedSize\n            + this._accountsHash.serializedSize\n            + /*nBits*/ 4\n            + /*height*/ 4\n            + /*timestamp*/ 4\n            + /*nonce*/ 4;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<boolean>}\n     */\n    async verifyProofOfWork(buf) {\n        const pow = await this.pow(buf);\n        return BlockUtils.isProofOfWork(pow, this.target);\n    }\n\n    /**\n     * @param {BlockHeader} prevHeader\n     * @returns {boolean}\n     */\n    isImmediateSuccessorOf(prevHeader) {\n        // Check that the height is one higher than the previous height.\n        if (this.height !== prevHeader.height + 1) {\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this.timestamp < prevHeader.timestamp) {\n            return false;\n        }\n\n        // Check that the hash of the predecessor block equals prevHash.\n        const prevHash = prevHeader.hash();\n        if (!this.prevHash.equals(prevHash)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Hash}\n     */\n    hash(buf) {\n        this._hash = this._hash || Hash.light(this.serialize(buf));\n        return this._hash;\n    }\n    \n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<Hash>}\n     */\n    async pow(buf) {\n        this._pow = this._pow || await Hash.hard(this.serialize(buf));\n        return this._pow;\n    }\n\n    /**\n     * @param {BlockHeader|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockHeader\n            && this._prevHash.equals(o.prevHash)\n            && this._interlinkHash.equals(o.interlinkHash)\n            && this._bodyHash.equals(o.bodyHash)\n            && this._accountsHash.equals(o.accountsHash)\n            && this._nBits === o.nBits\n            && this._height === o.height\n            && this._timestamp === o.timestamp\n            && this._nonce === o.nonce;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return 'BlockHeader{'\n            + `prevHash=${this._prevHash}, `\n            + `interlinkHash=${this._interlinkHash}, `\n            + `bodyHash=${this._bodyHash}, `\n            + `accountsHash=${this._accountsHash}, `\n            + `nBits=${this._nBits.toString(16)}, `\n            + `height=${this._height}, `\n            + `timestamp=${this._timestamp}, `\n            + `nonce=${this._nonce}`\n            + '}';\n    }\n\n    /** @type {number} */\n    get version() {\n        return this._version;\n    }\n\n    /** @type {Hash} */\n    get prevHash() {\n        return this._prevHash;\n    }\n\n    /** @type {Hash} */\n    get interlinkHash() {\n        return this._interlinkHash;\n    }\n\n    /** @type {Hash} */\n    get bodyHash() {\n        return this._bodyHash;\n    }\n\n    /** @type {Hash} */\n    get accountsHash() {\n        return this._accountsHash;\n    }\n\n    /** @type {number} */\n    get nBits() {\n        return this._nBits;\n    }\n\n    /** @type {BigNumber} */\n    get target() {\n        return BlockUtils.compactToTarget(this._nBits);\n    }\n\n    /** @type {BigNumber} */\n    get difficulty() {\n        return BlockUtils.compactToDifficulty(this._nBits);\n    }\n\n    /** @type {number} */\n    get height() {\n        return this._height;\n    }\n\n    /** @type {number} */\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    /** @type {number} */\n    get nonce() {\n        return this._nonce;\n    }\n\n    // XXX The miner changes the nonce of an existing BlockHeader during the\n    // mining process.\n    /** @type {number} */\n    set nonce(n) {\n        this._nonce = n;\n        this._hash = null;\n        this._pow = null;\n    }\n}\n// FIXME: Clean up for mainnet.\nBlockHeader.Version = {\n    V1: 1\n};\nBlockHeader.CURRENT_VERSION = BlockHeader.Version.V1;\nBlockHeader.SUPPORTED_VERSIONS = [\n    BlockHeader.Version.V1\n];\nBlockHeader.SERIALIZED_SIZE = 146;\nClass.register(BlockHeader);\n","class BlockInterlink {\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} prevHash\n     * @returns {{repeatBits: Uint8Array, compressed: Array.<Hash>}}\n     * @protected\n     */\n    static _compress(hashes, prevHash) {\n        const count = hashes.length;\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = new Uint8Array(repeatBitsSize);\n\n        let lastHash = prevHash;\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const hash = hashes[i];\n            if (!hash.equals(lastHash)) {\n                compressed.push(hash);\n                lastHash = hash;\n            } else {\n                repeatBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return {repeatBits, compressed};\n    }\n\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} [prevHash]\n     * @param {Uint8Array} [repeatBits]\n     * @param {Array.<Hash>} [compressed]\n     */\n    constructor(hashes, prevHash, repeatBits, compressed) {\n        if (!Array.isArray(hashes) || !NumberUtils.isUint8(hashes.length)\n            || hashes.some(it => !(it instanceof Hash))) throw new Error('Malformed hashes');\n        if ((repeatBits || compressed) && !(repeatBits && compressed)) throw new Error('Malformed repeatBits/compressed');\n        if (!prevHash && !repeatBits) throw new Error('Either prevHash or repeatBits/compressed required');\n\n        if (!repeatBits) {\n            ({repeatBits, compressed} = BlockInterlink._compress(hashes, prevHash));\n        }\n\n        /** @type {Array.<Hash>} */\n        this._hashes = hashes;\n        /** @type {Uint8Array} */\n        this._repeatBits = repeatBits;\n        /** @type {Array.<Hash>} */\n        this._compressed = compressed;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash} prevHash\n     * @returns {BlockInterlink}\n     */\n    static unserialize(buf, prevHash) {\n        const count = buf.readUint8();\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = buf.read(repeatBitsSize);\n\n        let hash = prevHash;\n        const hashes = [];\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const repeated = (repeatBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            if (!repeated) {\n                hash = Hash.unserialize(buf);\n                compressed.push(hash);\n            }\n            hashes.push(hash);\n        }\n\n        return new BlockInterlink(hashes, prevHash, repeatBits, compressed);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._hashes.length);\n        buf.write(this._repeatBits);\n        for (const hash of this._compressed) {\n            hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return /*count*/ 1\n            + this._repeatBits.length\n            + this._compressed.reduce((sum, hash) => sum + hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {BlockInterlink|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockInterlink\n            && this._hashes.length === o._hashes.length\n            && this._hashes.every((hash, i) => hash.equals(o.hashes[i]));\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot([this._repeatBits, GenesisConfig.GENESIS_HASH, ...this._compressed]);\n        }\n        return this._hash;\n    }\n\n    /**\n     * @type {Array.<Hash>}\n     */\n    get hashes() {\n        return this._hashes;\n    }\n\n    /**\n     * @type {number}\n     */\n    get length() {\n        return this._hashes.length;\n    }\n}\nClass.register(BlockInterlink);\n","class BlockBody {\n    /**\n     * @param {Uint8Array} extraData\n     * @returns {number}\n     */\n    static getMetadataSize(extraData) {\n        return Address.SERIALIZED_SIZE\n            + /*extraDataLength*/ 1\n            + extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n    }\n\n    /**\n     * @param {Address} minerAddr\n     * @param {Array.<Transaction>} transactions\n     * @param {Uint8Array} [extraData]\n     * @param {Array.<PrunedAccount>} prunedAccounts\n     */\n    constructor(minerAddr, transactions, extraData = new Uint8Array(0), prunedAccounts = []) {\n        if (!(minerAddr instanceof Address)) throw 'Malformed minerAddr';\n        if (!Array.isArray(transactions) || transactions.some(it => !(it instanceof Transaction))) throw 'Malformed transactions';\n        if (!(extraData instanceof Uint8Array) || !NumberUtils.isUint8(extraData.byteLength)) throw 'Malformed extraData';\n\n        /** @type {Address} */\n        this._minerAddr = minerAddr;\n        /** @type {Uint8Array} */\n        this._extraData = extraData;\n        /** @type {Array.<Transaction>} */\n        this._transactions = transactions;\n        /** @type {Array.<PrunedAccount>} */\n        this._prunedAccounts = prunedAccounts;\n        /** @type {Hash} */\n        this._hash = null;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BlockBody}\n     */\n    static unserialize(buf) {\n        const minerAddr = Address.unserialize(buf);\n        const extraDataLength = buf.readUint8();\n        const extraData = buf.read(extraDataLength);\n        const numTransactions = buf.readUint16();\n        const transactions = new Array(numTransactions);\n        for (let i = 0; i < numTransactions; i++) {\n            transactions[i] = Transaction.unserialize(buf);\n        }\n        const numPrunedAccounts = buf.readUint16();\n        const prunedAccounts = [];\n        for (let i = 0; i < numPrunedAccounts; i++) {\n            prunedAccounts.push(PrunedAccount.unserialize(buf));\n        }\n        return new BlockBody(minerAddr, transactions, extraData, prunedAccounts);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._minerAddr.serialize(buf);\n        buf.writeUint8(this._extraData.byteLength);\n        buf.write(this._extraData);\n        buf.writeUint16(this._transactions.length);\n        for (const tx of this._transactions) {\n            tx.serialize(buf);\n        }\n        buf.writeUint16(this._prunedAccounts.length);\n        for (const acc of this._prunedAccounts) {\n            acc.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        let size = this._minerAddr.serializedSize\n            + /*extraDataLength*/ 1\n            + this._extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n        for (const tx of this._transactions) {\n            size += tx.serializedSize;\n        }\n        size += this._prunedAccounts.reduce((sum, acc) => sum + acc.serializedSize, 0);\n        return size;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    verify() {\n        /** @type {Transaction} */\n        let previousTx = null;\n        for (const tx of this._transactions) {\n            // Ensure transactions are ordered and unique.\n            if (previousTx && previousTx.compareBlockOrder(tx) >= 0) {\n                Log.w(BlockBody, 'Invalid block - transactions not ordered.');\n                return false;\n            }\n            previousTx = tx;\n\n            // Check that all transactions are valid.\n            if (!tx.verify()) {\n                Log.w(BlockBody, 'Invalid block - invalid transaction');\n                return false;\n            }\n        }\n\n        let previousAcc = null;\n        for (const acc of this._prunedAccounts) {\n            // Ensure pruned accounts are ordered and unique.\n            if (previousAcc && previousAcc.compare(acc) >= 0) {\n                Log.w(BlockBody, 'Invalid block - pruned accounts not ordered.');\n                return false;\n            }\n            previousAcc = acc;\n            \n            // Check that pruned accounts are actually supposed to be pruned\n            if (!acc.account.isToBePruned()) {\n                Log.w(BlockBody, 'Invalid block - invalid pruned account');\n                return false;\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {Array}\n     */\n    getMerkleLeafs() {\n        return [this._minerAddr, this._extraData, ...this._transactions, ...this.prunedAccounts];\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot(this.getMerkleLeafs());\n        }\n        return this._hash;\n    }\n\n    /**\n     * @param {BlockBody} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockBody\n            && this._minerAddr.equals(o.minerAddr)\n            && BufferUtils.equals(this._extraData, o.extraData)\n            && this._transactions.length === o.transactions.length\n            && this._transactions.every((tx, i) => tx.equals(o.transactions[i]));\n    }\n\n    /**\n     * @return {Array.<Address>}\n     */\n    getAddresses() {\n        const addresses = [this._minerAddr];\n        for (const tx of this._transactions) {\n            addresses.push(tx.sender, tx.recipient);\n        }\n        return addresses;\n    }\n\n    /** @type {Uint8Array} */\n    get extraData() {\n        return this._extraData;\n    }\n\n    /** @type {Address} */\n    get minerAddr() {\n        return this._minerAddr;\n    }\n\n    /** @type {Array.<Transaction>} */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /** @type {number} */\n    get transactionCount() {\n        return this._transactions.length;\n    }\n\n    /** @type {Array.<PrunedAccount>} */\n    get prunedAccounts() {\n        return this._prunedAccounts;\n    }\n}\n\nClass.register(BlockBody);\n","class BlockUtils {\n    /**\n     * @param {number} compact\n     * @returns {BigNumber}\n     */\n    static compactToTarget(compact) {\n        return new BigNumber(compact & 0xffffff).times(new BigNumber(2).pow(8 * ((compact >> 24) - 3)));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static targetToCompact(target) {\n        if (!target.isFinite() || target.isNaN()) throw 'Invalid Target';\n\n        // Divide to get first byte\n        let size = Math.max(Math.ceil(Math.log2(target.toNumber()) / 8), 1);\n        const firstByte = target / Math.pow(2, (size - 1) * 8);\n\n        // If the first (most significant) byte is greater than 127 (0x7f),\n        // prepend a zero byte.\n        if (firstByte >= 0x80) {\n            size++;\n        }\n\n        // The first byte of the 'compact' format is the number of bytes,\n        // including the prepended zero if it's present.\n        // The following three bytes are the first three bytes of the above\n        // representation. If less than three bytes are present, then one or\n        // more of the last bytes of the compact representation will be zero.\n        return (size << 24) + ((target / Math.pow(2, (size - 3) * 8)) & 0xffffff);\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static getTargetHeight(target) {\n        // Precision loss should be ok here.\n        return Math.ceil(Math.log2(target.toNumber()));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static getTargetDepth(target) {\n        return BlockUtils.getTargetHeight(Policy.BLOCK_TARGET_MAX) - BlockUtils.getTargetHeight(target);\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {BigNumber}\n     */\n    static compactToDifficulty(compact) {\n        return Policy.BLOCK_TARGET_MAX.div(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {BigNumber} difficulty\n     * @returns {number}\n     */\n    static difficultyToCompact(difficulty) {\n        return BlockUtils.targetToCompact(BlockUtils.difficultyToTarget(difficulty));\n    }\n\n    /**\n     * @param {BigNumber} difficulty\n     * @returns {BigNumber}\n     */\n    static difficultyToTarget(difficulty) {\n        return Policy.BLOCK_TARGET_MAX.div(difficulty);\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {BigNumber}\n     */\n    static targetToDifficulty(target) {\n        return Policy.BLOCK_TARGET_MAX.div(target);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {BigNumber}\n     */\n    static hashToTarget(hash) {\n        return new BigNumber(hash.toHex(), 16);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {BigNumber}\n     */\n    static realDifficulty(hash) {\n        return BlockUtils.targetToDifficulty(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {number}\n     */\n    static getHashDepth(hash) {\n        return BlockUtils.getTargetDepth(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {number} target\n     * @returns {boolean}\n     */\n    static isProofOfWork(hash, target) {\n        return parseInt(hash.toHex(), 16) <= target;\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {boolean}\n     */\n\n    static isValidCompact(compact) {\n        return BlockUtils.isValidTarget(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {?BigNumber} target\n     * @returns {boolean}\n     */\n    static isValidTarget(target) {\n        return target !== null && target.gte(1) && target.lte(Policy.BLOCK_TARGET_MAX);\n    }\n\n    /**\n     * @param {BlockHeader} headBlock\n     * @param {BlockHeader} tailBlock\n     * @param {BigNumber} deltaTotalDifficulty\n     * @returns {BigNumber}\n     */\n    static getNextTarget(headBlock, tailBlock, deltaTotalDifficulty) {\n        Assert.that(\n            (headBlock.height - tailBlock.height === Policy.DIFFICULTY_BLOCK_WINDOW)\n                || (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW && tailBlock.height === 1),\n            `Tail and head block must be ${Policy.DIFFICULTY_BLOCK_WINDOW} blocks apart`);\n\n        let actualTime = headBlock.timestamp - tailBlock.timestamp;\n\n        // Simulate that the Policy.BLOCK_TIME was achieved for the blocks before the genesis block, i.e. we simulate\n        // a sliding window that starts before the genesis block. Assume difficulty = 1 for these blocks.\n        if (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW) {\n            actualTime += (Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1) * Policy.BLOCK_TIME;\n            deltaTotalDifficulty = deltaTotalDifficulty.plus(Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1);\n        }\n\n        // Compute the target adjustment factor.\n        const expectedTime = Policy.DIFFICULTY_BLOCK_WINDOW * Policy.BLOCK_TIME;\n        let adjustment = actualTime / expectedTime;\n\n        // Clamp the adjustment factor to [1 / MAX_ADJUSTMENT_FACTOR, MAX_ADJUSTMENT_FACTOR].\n        adjustment = Math.max(adjustment, 1 / Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n        adjustment = Math.min(adjustment, Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n\n        // Compute the next target.\n        const averageDifficulty = deltaTotalDifficulty.div(Policy.DIFFICULTY_BLOCK_WINDOW);\n        const averageTarget = BlockUtils.difficultyToTarget(averageDifficulty);\n        let nextTarget = averageTarget.times(adjustment);\n\n        // Make sure the target is below or equal the maximum allowed target (difficulty 1).\n        // Also enforce a minimum target of 1.\n        nextTarget = BigNumber.min(nextTarget, Policy.BLOCK_TARGET_MAX);\n        nextTarget = BigNumber.max(nextTarget, 1);\n\n        // XXX Reduce target precision to nBits precision.\n        const nBits = BlockUtils.targetToCompact(nextTarget);\n        return BlockUtils.compactToTarget(nBits);\n    }\n}\nClass.register(BlockUtils);\n","class Block {\n    /**\n     * @param {BlockHeader} header\n     * @param {BlockInterlink} interlink\n     * @param {BlockBody} [body]\n     */\n    constructor(header, interlink, body) {\n        if (!(header instanceof BlockHeader)) throw 'Malformed header';\n        if (!(interlink instanceof BlockInterlink)) throw 'Malformed interlink';\n        if (body && !(body instanceof BlockBody)) throw 'Malformed body';\n\n        /** @type {BlockHeader} */\n        this._header = header;\n        /** @type {BlockInterlink} */\n        this._interlink = interlink;\n        /** @type {BlockBody} */\n        this._body = body;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Block}\n     */\n    static unserialize(buf) {\n        const header = BlockHeader.unserialize(buf);\n        const interlink = BlockInterlink.unserialize(buf, header.prevHash);\n\n        let body = undefined;\n        const bodyPresent = buf.readUint8();\n        if (bodyPresent) {\n            body = BlockBody.unserialize(buf);\n        }\n\n        return new Block(header, interlink, body);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._header.serialize(buf);\n        this._interlink.serialize(buf);\n\n        if (this._body) {\n            buf.writeUint8(1);\n            this._body.serialize(buf);\n        } else {\n            buf.writeUint8(0);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._header.serializedSize\n            + this._interlink.serializedSize\n            + /*bodyPresent*/ 1\n            + (this._body ? this._body.serializedSize : 0);\n    }\n\n    /**\n     * @param {Time} time\n     * @returns {Promise.<boolean>}\n     */\n    async verify(time) {\n        if (this._valid === undefined) {\n            if (this.isLight() || this.body.transactions.length < 150 || !IWorker.areWorkersAsync) {\n                // worker overhead doesn't pay off for small transaction numbers\n                this._valid = await this._verify(time.now());\n            } else {\n                const transactionValid = this.body.transactions.map(t => t._valid);\n                const worker = await CryptoWorker.getInstanceAsync();\n                const {valid, pow, interlinkHash, bodyHash} = await worker.blockVerify(this.serialize(),\n                    transactionValid, time.now(), GenesisConfig.GENESIS_HASH.serialize(), GenesisConfig.NETWORK_ID);\n                this._valid = valid;\n                this.header._pow = Hash.unserialize(new SerialBuffer(pow));\n                this.interlink._hash = Hash.unserialize(new SerialBuffer(interlinkHash));\n                this.body._hash = Hash.unserialize(new SerialBuffer(bodyHash));\n            }\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} timeNow\n     * @returns {Promise.<boolean>}\n     */\n    async _verify(timeNow) {\n        // Check that the timestamp is not too far into the future.\n        if (this._header.timestamp * 1000 > timeNow + Block.TIMESTAMP_DRIFT_MAX * 1000) {\n            Log.w(Block, 'Invalid block - timestamp too far in the future');\n            return false;\n        }\n\n        // Check that the header hash matches the difficulty.\n        if (!(await this._header.verifyProofOfWork())) {\n            Log.w(Block, 'Invalid block - PoW verification failed');\n            return false;\n        }\n\n        // Check that the maximum block size is not exceeded.\n        if (this.serializedSize > Policy.BLOCK_SIZE_MAX) {\n            Log.w(Block, 'Invalid block - max block size exceeded');\n            return false;\n        }\n\n        // Verify that the interlink is valid.\n        if (!this._verifyInterlink()) {\n            return false;\n        }\n\n        // XXX Verify the body only if it is present.\n        if (this.isFull() && !this._verifyBody()) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyInterlink() {\n        // Skip check for genesis block due to the cyclic dependency (since the interlink hash contains the genesis block hash).\n        if (this.height === 1 && this._header.interlinkHash.equals(new Hash(null))) {\n            return true;\n        }\n\n        // Check that the interlinkHash given in the header matches the actual interlinkHash.\n        const interlinkHash = this._interlink.hash();\n        if (!this._header.interlinkHash.equals(interlinkHash)) {\n            Log.w(Block, 'Invalid block - interlink hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyBody() {\n        // Check that the body is valid.\n        if (!this._body.verify()) {\n            return false;\n        }\n\n        // Check that bodyHash given in the header matches the actual body hash.\n        const bodyHash = this._body.hash();\n        if (!this._header.bodyHash.equals(bodyHash)) {\n            Log.w(Block, 'Invalid block - body hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isImmediateSuccessorOf(predecessor) {\n        // Check the header.\n        if (!this._header.isImmediateSuccessorOf(predecessor.header)) {\n            return false;\n        }\n\n        // Check that the interlink is correct.\n        const interlink = await predecessor.getNextInterlink(this.target, this.version);\n        if (!this._interlink.equals(interlink)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isInterlinkSuccessorOf(predecessor) {\n        // Check that the height is higher than the predecessor's.\n        if (this._header.height <= predecessor.header.height) {\n            Log.v(Block, 'No interlink successor - height');\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this._header.timestamp < predecessor.header.timestamp) {\n            Log.v(Block, 'No interlink successor - timestamp');\n            return false;\n        }\n\n        // Check that the predecessor is contained in this block's interlink and verify its position.\n        const prevHash = predecessor.hash();\n        if (!GenesisConfig.GENESIS_HASH.equals(prevHash)) {\n            const prevPow = await predecessor.pow();\n            const targetHeight = BlockUtils.getTargetHeight(this.target);\n            let blockFound = false;\n\n            let depth = 0;\n            for (; depth < this._interlink.length; depth++) {\n                if (prevHash.equals(this._interlink.hashes[depth])) {\n                    blockFound = true;\n                    if (!BlockUtils.isProofOfWork(prevPow, Math.pow(2, targetHeight - depth))) {\n                        Log.v(Block, 'No interlink successor - invalid position in interlink');\n                        return false;\n                    }\n                }\n            }\n\n            if (!blockFound) {\n                Log.v(Block, 'No interlink successor - not in interlink');\n                return false;\n            }\n        }\n\n        // If the predecessor happens to be the immediate predecessor, check additionally:\n        // - that the height of the successor is one higher\n        // - that the interlink is correct.\n        if (this._header.prevHash.equals(prevHash)) {\n            if (this._header.height !== predecessor.header.height + 1) {\n                Log.v(Block, 'No interlink successor - immediate height');\n                return false;\n            }\n\n            const interlink = await predecessor.getNextInterlink(this.target, this.version);\n            const interlinkHash = interlink.hash();\n            if (!this._header.interlinkHash.equals(interlinkHash)) {\n                Log.v(Block, 'No interlink successor - immediate interlink');\n                return false;\n            }\n        }\n        // Otherwise, if the prevHash doesn't match but the blocks should be adjacent according to their height fields,\n        // this cannot be a valid successor of predecessor.\n        else if (this._header.height === predecessor.height.height + 1) {\n            Log.v(Block, 'No interlink successor - immediate height (2)');\n            return false;\n        }\n        // Otherwise, check that the interlink construction is valid given the information we have.\n        else {\n            // TODO Take different targets into account.\n\n            // The number of new blocks in the interlink is bounded by the height difference.\n            /** @type {HashSet.<Hash>} */\n            const hashes = new HashSet();\n            hashes.addAll(this._interlink.hashes);\n            hashes.removeAll(predecessor.interlink.hashes);\n            if (hashes.length > this._header.height - predecessor.header.height) {\n                Log.v(Block, 'No interlink successor - too many new blocks');\n                return false;\n            }\n\n            // Check that the interlink is not too short.\n            const thisDepth = BlockUtils.getTargetDepth(this.target);\n            const prevDepth = BlockUtils.getTargetDepth(predecessor.target);\n            const depthDiff = thisDepth - prevDepth;\n            if (this._interlink.length < predecessor.interlink.length - depthDiff) {\n                Log.v(Block, 'No interlink successor - interlink too short');\n                return false;\n            }\n\n            // If the same block is found in both interlinks, all blocks at lower depths must be the same in both interlinks.\n            let commonBlock = false;\n            const thisInterlink = this._interlink.hashes;\n            const prevInterlink = predecessor.interlink.hashes;\n            for (let i = 1; i < prevInterlink.length && i - depthDiff < thisInterlink.length; i++) {\n                if (prevInterlink[i].equals(thisInterlink[i - depthDiff])) {\n                    commonBlock = true;\n                }\n                else if (commonBlock) {\n                    Log.v(Block, 'No interlink successor - invalid common suffix');\n                    return false;\n                }\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isSuccessorOf(predecessor) {\n        // TODO Improve this! Lots of duplicate checks.\n        return (await this.isImmediateSuccessorOf(predecessor)) || (await this.isInterlinkSuccessorOf(predecessor));\n    }\n\n    /**\n     * @param {BigNumber} nextTarget\n     * @param {number} [nextVersion]\n     * @returns {Promise.<BlockInterlink>}\n     */\n    async getNextInterlink(nextTarget, nextVersion = BlockHeader.CURRENT_VERSION) {\n        /** @type {Array.<Hash>} */\n        const hashes = [];\n        const hash = this.hash();\n\n        // Compute how many times this blockHash should be included in the next interlink.\n        const thisPowDepth = BlockUtils.getHashDepth(await this.pow());\n        const nextTargetDepth = BlockUtils.getTargetDepth(nextTarget);\n        const numOccurrences = Math.max(thisPowDepth - nextTargetDepth + 1, 0);\n\n        // Push this blockHash numOccurrences times onto the next interlink.\n        for (let i = 0; i < numOccurrences; i++) {\n            hashes.push(hash);\n        }\n\n        // Compute how many blocks to omit from the beginning of this interlink.\n        const thisTargetDepth = BlockUtils.getTargetDepth(this.target);\n        const targetOffset = nextTargetDepth - thisTargetDepth;\n        const interlinkOffset = numOccurrences + targetOffset;\n\n        // Push the remaining hashes from this interlink.\n        for (let i = interlinkOffset; i < this.interlink.length; i++) {\n            hashes.push(this.interlink.hashes[i]);\n        }\n        \n        return new BlockInterlink(hashes, hash);\n    }\n\n    /**\n     * @returns {Block}\n     */\n    shallowCopy() {\n        return new Block(this._header, this._interlink, this._body);\n    }\n\n    /**\n     * @param {Block|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Block\n            && this._header.equals(o._header)\n            && this._interlink.equals(o._interlink)\n            && (this._body ? this._body.equals(o._body) : !o._body);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isLight() {\n        return !this._body;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isFull() {\n        return !!this._body;\n    }\n\n    /**\n     * @returns {Block}\n     */\n    toLight() {\n        return this.isLight() ? this : new Block(this._header, this._interlink);\n    }\n\n    /**\n     * @param {BlockBody} body\n     * @returns {Block}\n     */\n    toFull(body) {\n        return this.isFull() ? this : new Block(this._header, this._interlink, body);\n    }\n\n    /**\n     * @type {BlockHeader}\n     */\n    get header() {\n        return this._header;\n    }\n\n    /**\n     * @type {BlockInterlink}\n     */\n    get interlink() {\n        return this._interlink;\n    }\n\n    /**\n     * @type {BlockBody}\n     */\n    get body() {\n        if (this.isLight()) {\n            throw 'Cannot access body of light block';\n        }\n        return this._body;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get version() {\n        return this._header.version;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get prevHash() {\n        return this._header.prevHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get bodyHash() {\n        return this._header.bodyHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get accountsHash() {\n        return this._header.accountsHash;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nBits() {\n        return this._header.nBits;\n    }\n\n    /**\n     * @type {BigNumber}\n     */\n    get target() {\n        return this._header.target;\n    }\n\n    /**\n     * @type {BigNumber}\n     */\n    get difficulty() {\n        return this._header.difficulty;\n    }\n\n    /**\n     * @type {number}\n     */\n    get height() {\n        return this._header.height;\n    }\n    \n    /**\n     * @type {number}\n     */\n    get timestamp() {\n        return this._header.timestamp;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nonce() {\n        return this._header.nonce;\n    }\n\n    /**\n     * @type {Address}\n     */\n    get minerAddr() {\n        return this._body.minerAddr;\n    }\n\n    /**\n     * @type {Array.<Transaction>}\n     */\n    get transactions() {\n        return this._body.transactions;\n    }\n\n    /**\n     * @type {number}\n     */\n    get transactionCount() {\n        return this._body.transactionCount;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Hash}\n     */\n    hash(buf) {\n        return this._header.hash(buf);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Promise.<Hash>}\n     */\n    pow(buf) {\n        return this._header.pow(buf);\n    }\n\n    toString() {\n        return `Block{height=${this.height},prev=${this.prevHash}}`;\n    }\n\n}\nBlock.TIMESTAMP_DRIFT_MAX = 600 /* seconds */; // 10 minutes\nClass.register(Block);\n","/**\n * @abstract\n */\nclass Transaction {\n    /**\n     * @param {Transaction.Format} format\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(format, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId = GenesisConfig.NETWORK_ID) {\n        if (!(sender instanceof Address)) throw new Error('Malformed sender');\n        if (!NumberUtils.isUint8(senderType)) throw new Error('Malformed sender type');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient');\n        if (!NumberUtils.isUint8(recipientType)) throw new Error('Malformed recipient type');\n        if (!NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed value');\n        if (!NumberUtils.isUint64(fee)) throw new Error('Malformed fee');\n        if (!NumberUtils.isUint32(validityStartHeight)) throw new Error('Malformed validityStartHeight');\n        if (!NumberUtils.isUint8(flags) && (flags & ~(Transaction.Flag.ALL)) > 0) throw new Error('Malformed flags');\n        if (!(data instanceof Uint8Array) || !(NumberUtils.isUint16(data.byteLength))) throw new Error('Malformed data');\n        if (proof && (!(proof instanceof Uint8Array) || !(NumberUtils.isUint16(proof.byteLength)))) throw new Error('Malformed proof');\n        if (!NumberUtils.isUint8(networkId)) throw new Error('Malformed networkId');\n\n        /** @type {Transaction.Format} */\n        this._format = format;\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Account.Type} */\n        this._senderType = senderType;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Account.Type} */\n        this._recipientType = recipientType;\n        /** @type {number} */\n        this._value = value;\n        /** @type {number} */\n        this._fee = fee;\n        /** @type {number} */\n        this._networkId = networkId;\n        /** @type {number} */\n        this._validityStartHeight = validityStartHeight;\n        /** @type {Transaction.Flag | *} */\n        this._flags = flags;\n        /** @type {Uint8Array} */\n        this._data = data;\n        /** @type {Uint8Array} */\n        this._proof = proof;\n\n        if (this._recipient === Address.CONTRACT_CREATION) this._recipient = this.getContractCreationAddress();\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const format = /** @type {Transaction.Format} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format).unserialize(buf);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        buf.writeUint16(this._data.byteLength);\n        buf.write(this._data);\n        this._sender.serialize(buf);\n        buf.writeUint8(this._senderType);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._recipientType);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        buf.writeUint8(this._flags);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return /*dataSize*/ 2\n            + this._data.byteLength\n            + this._sender.serializedSize\n            + /*senderType*/ 1\n            + this._recipient.serializedSize\n            + /*recipientType*/ 1\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + /*flags*/ 1;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     */\n    verify(networkId) {\n        if (this._valid === undefined) {\n            this._valid = this._verify(networkId);\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     * @private\n     */\n    _verify(networkId = GenesisConfig.NETWORK_ID) {\n        if (this._networkId !== networkId) {\n            Log.w(Transaction, 'Transaction is not valid in this network', this);\n            return false;\n        }\n        // Check that sender != recipient.\n        if (this._recipient.equals(this._sender)) {\n            Log.w(Transaction, 'Sender and recipient must not match', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.has(this._senderType) || !Account.TYPE_MAP.has(this._recipientType)) {\n            Log.w(Transaction, 'Invalid account type', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._senderType).verifyOutgoingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for sender', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._recipientType).verifyIncomingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for recipient', this);\n            return false;\n        }\n        return true;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        throw new Error('Getter needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        throw new Error('Method needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        // Exclude the signature, we don't want transactions to be malleable.\n        this._hash = this._hash || Hash.light(this.serializeContent());\n        return this._hash;\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compare(o) {\n        if (this.fee / this.serializedSize > o.fee / o.serializedSize) return -1;\n        if (this.fee / this.serializedSize < o.fee / o.serializedSize) return 1;\n        if (this.serializedSize > o.serializedSize) return -1;\n        if (this.serializedSize < o.serializedSize) return 1;\n        if (this.fee > o.fee) return -1;\n        if (this.fee < o.fee) return 1;\n        if (this.value > o.value) return -1;\n        if (this.value < o.value) return 1;\n        return this.compareBlockOrder(o);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compareBlockOrder(o) {\n        // This function must return 0 iff this.equals(o).\n        const recCompare = this._recipient.compare(o._recipient);\n        if (recCompare !== 0) return recCompare;\n        if (this._validityStartHeight < o._validityStartHeight) return -1;\n        if (this._validityStartHeight > o._validityStartHeight) return 1;\n        if (this._fee > o._fee) return -1;\n        if (this._fee < o._fee) return 1;\n        if (this._value > o._value) return -1;\n        if (this._value < o._value) return 1;\n        const senderCompare = this._sender.compare(o._sender);\n        if (senderCompare !== 0) return senderCompare;\n        if (this._recipientType < o._recipientType) return -1;\n        if (this._recipientType > o._recipientType) return 1;\n        if (this._senderType < o._senderType) return -1;\n        if (this._senderType > o._senderType) return 1;\n        if (this._flags < o._flags) return -1;\n        if (this._flags > o._flags) return 1;\n        return BufferUtils.compare(this._data, o._data);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {boolean}\n     */\n    equals(o) {\n        // This ignores format and proof to be consistent with hash():\n        //   tx1.hash() == tx2.hash() iff tx1.equals(t2)\n        return o instanceof Transaction\n            && this._sender.equals(o._sender)\n            && this._senderType === o._senderType\n            && this._recipient.equals(o._recipient)\n            && this._recipientType === o._recipientType\n            && this._value === o._value\n            && this._fee === o._fee\n            && this._validityStartHeight === o._validityStartHeight\n            && this._networkId === o._networkId\n            && this._flags === o._flags\n            && BufferUtils.equals(this._data, o._data);\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `Transaction{`\n            + `sender=${this._sender.toBase64()}, `\n            + `recipient=${this._recipient.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `validityStartHeight=${this._validityStartHeight}, `\n            + `networkId=${this._networkId}`\n            + `}`;\n    }\n\n    /**\n     * @return {Address}\n     */\n    getContractCreationAddress() {\n        const tx = Transaction.unserialize(this.serialize());\n        tx._recipient = Address.NULL;\n        tx._hash = null;\n        return Address.fromHash(tx.hash());\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Account.Type} */\n    get senderType() {\n        return this._senderType;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Account.Type} */\n    get recipientType() {\n        return this._recipientType;\n    }\n\n    /** @type {number} */\n    get value() {\n        return this._value;\n    }\n\n    /** @type {number} */\n    get fee() {\n        return this._fee;\n    }\n\n    /** @type {number} */\n    get feePerByte() {\n        return this._fee / this.serializedSize;\n    }\n\n    /** @type {number} */\n    get networkId() {\n        return this._networkId;\n    }\n\n    /** @type {number} */\n    get validityStartHeight() {\n        return this._validityStartHeight;\n    }\n\n    /** @type {number} */\n    get flags() {\n        return this._flags;\n    }\n\n    /**\n     * @param {Transaction.Flag} flag\n     * @returns {boolean}\n     */\n    hasFlag(flag) {\n        return (this._flags & flag) > 0;\n    }\n\n    /** @type {Uint8Array} */\n    get data() {\n        return this._data;\n    }\n\n    /** @type {Uint8Array} */\n    get proof() {\n        return this._proof;\n    }\n\n    // Sender proof is set by the Wallet after signing a transaction.\n    /** @type {Uint8Array} */\n    set proof(proof) {\n        this._proof = proof;\n    }\n}\n\n/**\n * Enum for Transaction formats.\n * @enum\n */\nTransaction.Format = {\n    BASIC: 0,\n    EXTENDED: 1\n};\n/**\n * @enum\n */\nTransaction.Flag = {\n    NONE: 0,\n    CONTRACT_CREATION: 0b1,\n    ALL: 0b1\n};\n/** @type {Map.<Transaction.Format, {unserialize: function(buf: SerialBuffer):Transaction}>} */\nTransaction.FORMAT_MAP = new Map();\n\nClass.register(Transaction);\n","class SignatureProof {\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    static verifyTransaction(transaction) {\n        try {\n            const buffer = new SerialBuffer(transaction.proof);\n            const proof = SignatureProof.unserialize(buffer);\n\n            // Reject proof if it is longer than needed.\n            if (buffer.readPos !== buffer.byteLength) {\n                Log.w(SignatureProof, 'Invalid SignatureProof - overlong');\n                return false;\n            }\n\n            return proof.verify(transaction.sender, transaction.serializeContent());\n        } catch (e) {\n            Log.w(SignatureProof, `Failed to verify transaction: ${e.message || e}`, e);\n            return false;\n        }\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static singleSig(publicKey, signature) {\n        return new SignatureProof(publicKey, new MerklePath([]), signature);\n    }\n\n    /**\n     * @param {PublicKey} signerKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static multiSig(signerKey, publicKeys, signature) {\n        const merklePath = MerklePath.compute(publicKeys, signerKey);\n        return new SignatureProof(signerKey, merklePath, signature);\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {MerklePath} merklePath\n     * @param {Signature} signature\n     */\n    constructor(publicKey, merklePath, signature) {\n        if (!(publicKey instanceof PublicKey)) throw new Error('Malformed publickKey');\n        if (!(merklePath instanceof MerklePath)) throw new Error('Malformed merklePath');\n        if (signature && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        /**\n         * @type {PublicKey}\n         * @private\n         */\n        this._publicKey = publicKey;\n        /**\n         * @type {MerklePath}\n         * @private\n         */\n        this._merklePath = merklePath;\n        /**\n         * @type {Signature}\n         * @private\n         */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {SignatureProof}\n     */\n    static unserialize(buf) {\n        const publicKey = PublicKey.unserialize(buf);\n        const merklePath = MerklePath.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new SignatureProof(publicKey, merklePath, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._publicKey.serialize(buf);\n        this._merklePath.serialize(buf);\n\n        // The SignatureProof is sometimes serialized before the signature is set (e.g. when creating transactions).\n        // Simply don't serialize the signature if it's missing as this should never go over the wire.\n        // We always expect the signature to be present when unserializing.\n        if (this._signature) {\n            this._signature.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._publicKey.serializedSize\n            + this._merklePath.serializedSize\n            + (this._signature ? this._signature.serializedSize : 0);\n    }\n\n    /**\n     * @param {SignatureProof} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof SignatureProof\n            && this._publicKey.equals(o._publicKey)\n            && this._merklePath.equals(o._merklePath)\n            && (this._signature ? this._signature.equals(o._signature) : this._signature === o._signature);\n    }\n\n    /**\n     * @param {?Address} sender\n     * @param {Uint8Array} data\n     * @returns {boolean}\n     */\n    verify(sender, data) {\n        if (sender !== null && !this.isSignedBy(sender)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signer does not match sender address');\n            return false;\n        }\n\n        if (!this._signature) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is missing');\n            return false;\n        }\n\n        if (!this._signature.verify(this._publicKey, data)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is invalid');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Address} sender\n     * @returns {boolean}\n     */\n    isSignedBy(sender) {\n        const merkleRoot = this._merklePath.computeRoot(this._publicKey);\n        const signerAddr = Address.fromHash(merkleRoot);\n        return signerAddr.equals(sender);\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {MerklePath} */\n    get merklePath() {\n        return this._merklePath;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {Signature} */\n    set signature(signature) {\n        this._signature = signature;\n    }\n}\n\nClass.register(SignatureProof);\n","class BasicTransaction extends Transaction {\n    /**\n     * @param {PublicKey} senderPubKey\n     * @param {Address} recipient\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Signature} [signature]\n     * @param {number} [networkId]\n     */\n    constructor(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId) {\n        if (!(senderPubKey instanceof PublicKey)) throw new Error('Malformed senderPubKey');\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        const proof = SignatureProof.singleSig(senderPubKey, signature);\n        super(Transaction.Format.BASIC, senderPubKey.toAddress(), Account.Type.BASIC, recipient, Account.Type.BASIC, value, fee, validityStartHeight, Transaction.Flag.NONE, new Uint8Array(0), proof.serialize(), networkId);\n\n        /**\n         * @type {SignatureProof}\n         * @private\n         */\n        this._signatureProof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        Assert.that(type === Transaction.Format.BASIC);\n\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new BasicTransaction(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.BASIC);\n        this.senderPubKey.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        this.signature.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.senderPubKey.serializedSize\n            + this._recipient.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + this.signature.serializedSize;\n    }\n\n    /**\n     * @type {PublicKey}\n     */\n    get senderPubKey() {\n        return this._signatureProof.publicKey;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    get signature() {\n        return this._signatureProof.signature;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    set signature(signature) {\n        this._signatureProof.signature = signature;\n        this._proof = this._signatureProof.serialize();\n    }\n}\nTransaction.FORMAT_MAP.set(Transaction.Format.BASIC, BasicTransaction);\nClass.register(BasicTransaction);\n","class ExtendedTransaction extends Transaction {\n\n    /**\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof = new Uint8Array(0), networkId) {\n        super(Transaction.Format.EXTENDED, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = /** @type {Transaction.Format} */ buf.readUint8();\n        Assert.that(type === Transaction.Format.EXTENDED);\n\n        const dataSize = buf.readUint16();\n        const data = buf.read(dataSize);\n        const sender = Address.unserialize(buf);\n        const senderType = /** @type {Account.Type} */ buf.readUint8();\n        const recipient = Address.unserialize(buf);\n        const recipientType = /** @type {Account.Type} */ buf.readUint8();\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const flags = buf.readUint8();\n        const proofSize = buf.readUint16();\n        const proof = buf.read(proofSize);\n        return new ExtendedTransaction(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.EXTENDED);\n        this.serializeContent(buf);\n        buf.writeUint16(this._proof.byteLength);\n        buf.write(this._proof);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.serializedContentSize\n            + /*proofSize*/ 2\n            + this._proof.byteLength;\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.EXTENDED, ExtendedTransaction);\nClass.register(ExtendedTransaction);\n"]}